#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 54 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 16922 0 26 3 16 #"#lang plai-typed"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 7 #"require"
0 0 22 3 1 #" "
0 0 19 3 24 #"\"python-core-syntax.rkt\""
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 19 3 23 #"\"python-primitives.rkt\""
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 19 3 20 #"\"python-desugar.rkt\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 7 #"require"
0 0 22 3 2 #" ("
0 0 14 3 8 #"typed-in"
0 0 22 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 22 3 2 #" ["
0 0 14 3 8 #"string<?"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ["
0 0 14 3 6 #"string"
0 0 22 3 1 #" "
0 0 14 3 6 #"string"
0 0 22 3 1 #" "
0 0 14 3 2 #"->"
0 0 22 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 22 3 4 #"]]))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 7 #"require"
0 0 22 3 2 #" ("
0 0 14 3 8 #"typed-in"
0 0 22 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 22 3 2 #" ["
0 0 14 3 8 #"string>?"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ["
0 0 14 3 6 #"string"
0 0 22 3 1 #" "
0 0 14 3 6 #"string"
0 0 22 3 1 #" "
0 0 14 3 2 #"->"
0 0 22 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 22 3 4 #"]]))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 7 #"require"
0 0 22 3 2 #" ("
0 0 14 3 8 #"typed-in"
0 0 22 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 22 3 2 #" ["
0 0 14 3 9 #"string<=?"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ["
0 0 14 3 6 #"string"
0 0 22 3 1 #" "
0 0 14 3 6 #"string"
0 0 22 3 1 #" "
0 0 14 3 2 #"->"
0 0 22 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 22 3 4 #"]]))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 7 #"require"
0 0 22 3 2 #" ("
0 0 14 3 8 #"typed-in"
0 0 22 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 22 3 2 #" ["
0 0 14 3 9 #"string>=?"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ["
0 0 14 3 6 #"string"
0 0 22 3 1 #" "
0 0 14 3 6 #"string"
0 0 22 3 1 #" "
0 0 14 3 2 #"->"
0 0 22 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 22 3 4 #"]]))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 7 #"require"
0 0 22 3 2 #" ("
0 0 14 3 8 #"typed-in"
0 0 22 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 22 3 2 #" ["
0 0 14 3 13 #"string-length"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ["
0 0 14 3 6 #"string"
0 0 22 3 1 #" "
0 0 14 3 2 #"->"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 4 #"]]))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 7 #"require"
0 0 22 3 2 #" ("
0 0 14 3 8 #"typed-in"
0 0 22 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 22 3 2 #" ["
0 0 14 3 11 #"bitwise-not"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ["
0 0 14 3 6 #"number"
0 0 22 3 1 #" "
0 0 14 3 2 #"->"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 4 #"]]))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 7 #"require"
0 0 22 3 2 #" ("
0 0 14 3 8 #"typed-in"
0 0 22 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 22 3 2 #" ["
0 0 14 3 7 #"fixnum?"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ["
0 0 14 3 6 #"number"
0 0 22 3 1 #" "
0 0 14 3 2 #"->"
0 0 22 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 22 3 4 #"]]))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 7 #"require"
0 0 22 3 2 #" ("
0 0 14 3 8 #"typed-in"
0 0 22 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 22 3 2 #" ["
0 0 14 3 7 #"flonum?"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ["
0 0 14 3 6 #"number"
0 0 22 3 1 #" "
0 0 14 3 2 #"->"
0 0 22 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 22 3 4 #"]]))"
0 0 22 29 1 #"\n"
0 0 17 3 80
(
 #";(require (typed-in racket/string [string-split : [string -> (listof"
 #" string)]]))"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 7 #"require"
0 0 22 3 2 #" ("
0 0 14 3 8 #"typed-in"
0 0 22 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 22 3 2 #" ["
0 0 14 3 12 #"string->list"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ["
0 0 14 3 6 #"string"
0 0 22 3 1 #" "
0 0 14 3 2 #"->"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 6 #"string"
0 0 22 3 5 #")]]))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 7 #"require"
0 0 22 3 2 #" ("
0 0 14 3 8 #"typed-in"
0 0 22 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 22 3 2 #" ["
0 0 14 3 12 #"list->string"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 3 #" [("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 6 #"string"
0 0 22 3 2 #") "
0 0 14 3 2 #"->"
0 0 22 3 1 #" "
0 0 14 3 6 #"string"
0 0 22 3 4 #"]]))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 7 #"require"
0 0 22 3 2 #" ("
0 0 14 3 8 #"typed-in"
0 0 22 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 22 3 2 #" ["
0 0 14 3 9 #"list-tail"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 3 #" [("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 2 #") "
0 0 14 3 6 #"number"
0 0 22 3 1 #" "
0 0 14 3 2 #"->"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 5 #")]]))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 7 #"require"
0 0 22 3 2 #" ("
0 0 14 3 8 #"typed-in"
0 0 22 3 1 #" "
0 0 14 3 11 #"racket/list"
0 0 22 3 2 #" ["
0 0 14 3 6 #"argmax"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 3 #" [("
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 1 #" "
0 0 14 3 2 #"->"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 3 #") ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 2 #") "
0 0 14 3 2 #"->"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 4 #"]]))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 7 #"require"
0 0 22 3 2 #" ("
0 0 14 3 8 #"typed-in"
0 0 22 3 1 #" "
0 0 14 3 11 #"racket/list"
0 0 22 3 2 #" ["
0 0 14 3 10 #"drop-right"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 3 #" [("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 2 #") "
0 0 14 3 6 #"number"
0 0 22 3 1 #" "
0 0 14 3 2 #"->"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 5 #")]]))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 7 #"require"
0 0 22 3 2 #" ("
0 0 14 3 8 #"typed-in"
0 0 22 3 1 #" "
0 0 14 3 11 #"racket/list"
0 0 22 3 2 #" ["
0 0 14 3 4 #"last"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 3 #" [("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 2 #") "
0 0 14 3 2 #"->"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 4 #"]]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 36 #";;Holds the exception to be reraised"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 1 #" "
0 0 28 3 14 #"exn-to-reraise"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 3 #"box"
0 0 22 3 2 #" ("
0 0 34 3 8 #"VUnbound"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";;Returns a new memory address to be used"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 1 #" "
0 0 28 3 7 #"new-loc"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 3 #"let"
0 0 22 3 3 #" (["
0 0 28 3 1 #"n"
0 0 22 3 2 #" ("
0 0 34 3 3 #"box"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 34 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 34 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 34 3 8 #"set-box!"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 2 #" ("
0 0 34 3 4 #"add1"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";;Returns a new uid to be used"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 1 #" "
0 0 28 3 7 #"new-uid"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 3 #"let"
0 0 22 3 3 #" (["
0 0 28 3 1 #"n"
0 0 22 3 2 #" ("
0 0 34 3 3 #"box"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 34 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 34 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 34 3 8 #"set-box!"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 2 #" ("
0 0 34 3 4 #"add1"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 57 #";;this is the global variable with the global environment"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 1 #" "
0 0 28 3 9 #"globalEnv"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 75
(
 #";;this should be called only once, at the beggining of the interpret"
 #"ation, "
) 0 0 22 29 1 #"\n"
0 0 17 3 59
#";;to copy the initial environment and create the global one"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 15 #"createGlobalEnv"
0 0 22 3 2 #" ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 5 #"foldl"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 3 #"key"
0 0 22 3 1 #" "
0 0 28 3 6 #"newEnv"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 7 #"SLTuple"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 3 #"key"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 17 #"createGlobalScope"
0 0 22 3 1 #" "
0 0 19 3 81
(
 #"\"Cannot find key inside hash with this key in hash-keys: something "
 #"is very wrong\""
) 0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 3 #") ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" [("
0 0 15 3 13 #"define-values"
0 0 22 3 2 #" ("
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 28 3 1 #"l"
0 0 22 3 2 #") "
0 0 28 3 1 #"v"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ("
0 0 28 3 10 #"augmentEnv"
0 0 22 3 1 #" "
0 0 28 3 3 #"key"
0 0 22 3 2 #" ("
0 0 34 3 6 #"values"
0 0 22 3 2 #" ("
0 0 34 3 6 #"Global"
0 0 22 3 2 #") "
0 0 28 3 1 #"l"
0 0 22 3 2 #") "
0 0 28 3 6 #"newEnv"
0 0 22 3 5 #"))]))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 34 3 9 #"hash-keys"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 100
(
 #";;keepOldEnv is a helper function that will keep all of the non-glob"
 #"al variables of the older scope,"
) 0 0 22 29 1 #"\n"
0 0 17 3 62
#";;remembering to change 'Local' variables into 'NonLocal' ones"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 10 #"keepOldEnv"
0 0 22 3 2 #" ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 5 #"foldl"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 3 #"key"
0 0 22 3 1 #" "
0 0 28 3 6 #"newEnv"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 7 #"SLTuple"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 3 #"key"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 10 #"keepOldEnv"
0 0 22 3 1 #" "
0 0 19 3 81
(
 #"\"Cannot find key inside hash with this key in hash-keys: something "
 #"is very wrong\""
) 0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 3 #") ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" [("
0 0 15 3 13 #"define-values"
0 0 22 3 2 #" ("
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 28 3 1 #"l"
0 0 22 3 2 #") "
0 0 28 3 1 #"v"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 9 #"ScopeType"
0 0 22 3 1 #" "
0 0 28 3 1 #"t"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ["
0 0 14 3 5 #"Local"
0 0 22 3 5 #" () ("
0 0 28 3 10 #"augmentEnv"
0 0 22 3 1 #" "
0 0 28 3 3 #"key"
0 0 22 3 2 #" ("
0 0 34 3 6 #"values"
0 0 22 3 2 #" ("
0 0 34 3 8 #"NonLocal"
0 0 22 3 2 #") "
0 0 28 3 1 #"l"
0 0 22 3 2 #") "
0 0 28 3 6 #"newEnv"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ["
0 0 14 3 6 #"Global"
0 0 22 3 4 #" () "
0 0 28 3 6 #"newEnv"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ["
0 0 14 3 8 #"NonLocal"
0 0 22 3 5 #" () ("
0 0 28 3 10 #"augmentEnv"
0 0 22 3 1 #" "
0 0 28 3 3 #"key"
0 0 22 3 2 #" ("
0 0 34 3 6 #"values"
0 0 22 3 2 #" ("
0 0 34 3 8 #"NonLocal"
0 0 22 3 2 #") "
0 0 28 3 1 #"l"
0 0 22 3 2 #") "
0 0 28 3 6 #"newEnv"
0 0 22 3 7 #")]))]))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 34 3 9 #"hash-keys"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 103
(
 #";;addGlobalVars will use the vlist (list of variables and ScopeTypes"
 #") to insert the variables declared "
) 0 0 22 29 1 #"\n"
0 0 17 3 30 #";;as Global in the environment"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 13 #"addGlobalVars"
0 0 22 3 2 #" ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ["
0 0 28 3 5 #"vlist"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 2 #" ("
0 0 14 3 9 #"ScopeType"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 5 #"))]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 5 #"vlist"
0 0 22 3 2 #") "
0 0 28 3 3 #"env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" [("
0 0 15 3 13 #"define-values"
0 0 22 3 2 #" ("
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 3 #") ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 5 #"vlist"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 7 #"Global?"
0 0 22 3 1 #" "
0 0 28 3 1 #"t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 28 3 6 #"inEnv?"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 30 3 9 #"globalEnv"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 28 3 13 #"addGlobalVars"
0 0 22 3 2 #" ("
0 0 28 3 10 #"augmentEnv"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 2 #" ("
0 0 34 3 6 #"values"
0 0 22 3 2 #" ("
0 0 34 3 6 #"Global"
0 0 22 3 3 #") ("
0 0 28 3 9 #"lookupEnv"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 30 3 9 #"globalEnv"
0 0 22 3 3 #")) "
0 0 28 3 3 #"env"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 36 #"                                   ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 5 #"vlist"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 34 3 3 #"let"
0 0 22 3 3 #" (["
0 0 28 3 11 #"newLocation"
0 0 22 3 2 #" ("
0 0 28 3 7 #"new-loc"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 34 3 5 #"begin"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ("
0 0 34 3 4 #"set!"
0 0 22 3 1 #" "
0 0 30 3 9 #"globalEnv"
0 0 22 3 2 #" ("
0 0 28 3 10 #"augmentEnv"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                    ("
0 0 34 3 6 #"values"
0 0 22 3 2 #" ("
0 0 34 3 6 #"Global"
0 0 22 3 2 #") "
0 0 28 3 11 #"newLocation"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 52 #"                                                    "
0 0 28 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ("
0 0 28 3 13 #"addGlobalVars"
0 0 22 3 2 #" ("
0 0 28 3 10 #"augmentEnv"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 52 #"                                                   ("
0 0 34 3 6 #"values"
0 0 22 3 2 #" ("
0 0 34 3 6 #"Global"
0 0 22 3 2 #") "
0 0 28 3 11 #"newLocation"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 51 #"                                                   "
0 0 28 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                       ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 5 #"vlist"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 28 3 13 #"addGlobalVars"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 2 #" ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 5 #"vlist"
0 0 22 3 7 #"))))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 85
(
 #";;addNonLocals checks for errors that may be raised by the 'nonlocal"
 #"' expression and,"
) 0 0 22 29 1 #"\n"
0 0 17 3 54 #";;if there are no errors, returns the same environment"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 12 #"addNonLocals"
0 0 22 3 2 #" ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 28 3 5 #"vlist"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 2 #" ("
0 0 14 3 9 #"ScopeType"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 5 #"))]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 5 #"vlist"
0 0 22 3 2 #") "
0 0 28 3 3 #"env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" [("
0 0 15 3 13 #"define-values"
0 0 22 3 2 #" ("
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 3 #") ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 5 #"vlist"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 9 #"NonLocal?"
0 0 22 3 1 #" "
0 0 28 3 1 #"t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 28 3 6 #"inEnv?"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 7 #"Global?"
0 0 22 3 2 #" ("
0 0 28 3 12 #"getScopeType"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"addNonLocals"
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 26 #"\"no binding for nonlocal \""
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-append"
0 0 22 3 2 #" ("
0 0 34 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 2 #") "
0 0 19 3 8 #"\" found\""
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ("
0 0 28 3 12 #"addNonLocals"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 2 #" ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 5 #"vlist"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"addNonLocals"
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 26 #"\"no binding for nonlocal \""
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-append"
0 0 22 3 2 #" ("
0 0 34 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 2 #") "
0 0 19 3 8 #"\" found\""
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 28 3 12 #"addNonLocals"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 2 #" ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 5 #"vlist"
0 0 22 3 7 #"))))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 99
(
 #";;addLocals receives a list with Local variables candidates and a li"
 #"st with the variables that are "
) 0 0 22 29 1 #"\n"
0 0 17 3 91
(
 #";;already declared as global or nonlocal in this scope. It returns a"
 #"n environment with the "
) 0 0 22 29 1 #"\n"
0 0 17 3 34 #";;appended correct Local variables"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 9 #"addLocals"
0 0 22 3 2 #" ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ["
0 0 28 3 9 #"localList"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 2 #" ("
0 0 14 3 9 #"ScopeType"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ["
0 0 28 3 10 #"othersList"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 2 #" ("
0 0 14 3 9 #"ScopeType"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 5 #"))]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 9 #"localList"
0 0 22 3 2 #") "
0 0 28 3 3 #"env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" [("
0 0 15 3 13 #"define-values"
0 0 22 3 2 #" ("
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 3 #") ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 9 #"localList"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 5 #"foldl"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 1 #"l"
0 0 22 3 1 #" "
0 0 28 3 6 #"result"
0 0 22 3 3 #") ("
0 0 34 3 2 #"or"
0 0 22 3 1 #" "
0 0 28 3 1 #"l"
0 0 22 3 1 #" "
0 0 28 3 6 #"result"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                       "
0 0 34 3 5 #"false"
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ("
0 0 34 3 3 #"map"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 5 #"st-id"
0 0 22 3 3 #") ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" [("
0 0 15 3 13 #"define-values"
0 0 22 3 2 #" ("
0 0 28 3 2 #"t2"
0 0 22 3 1 #" "
0 0 28 3 3 #"id2"
0 0 22 3 2 #") "
0 0 28 3 5 #"st-id"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 47 #"                                              ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 28 3 3 #"id2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 50 #"                                                  "
0 0 34 3 4 #"true"
0 0 22 29 1 #"\n"
0 0 22 3 50 #"                                                  "
0 0 34 3 5 #"false"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                            "
0 0 28 3 10 #"othersList"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 28 3 9 #"addLocals"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 2 #" ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 9 #"localList"
0 0 22 3 2 #") "
0 0 28 3 10 #"othersList"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 28 3 9 #"addLocals"
0 0 22 3 2 #" ("
0 0 28 3 10 #"augmentEnv"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                       ("
0 0 34 3 6 #"values"
0 0 22 3 2 #" ("
0 0 34 3 5 #"Local"
0 0 22 3 3 #") ("
0 0 28 3 7 #"new-loc"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                       "
0 0 28 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 9 #"localList"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                           "
0 0 28 3 10 #"othersList"
0 0 22 3 6 #")))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 67
#";;addArgs just appends the args to a list of (ScopeType * symbol), "
0 0 22 29 1 #"\n"
0 0 17 3 28 #";;with the ScopeType 'Local'"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 7 #"addArgs"
0 0 22 3 2 #" ["
0 0 28 3 3 #"lst"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 2 #" ("
0 0 14 3 9 #"ScopeType"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 4 #")]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 2 #" ("
0 0 14 3 9 #"ScopeType"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 2 #") "
0 0 28 3 3 #"lst"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 28 3 7 #"addArgs"
0 0 22 3 2 #" ("
0 0 34 3 6 #"append"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 2 #" ("
0 0 34 3 6 #"values"
0 0 22 3 2 #" ("
0 0 34 3 5 #"Local"
0 0 22 3 3 #") ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 4 #"))) "
0 0 28 3 3 #"lst"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 5 #"))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 77
(
 #";;newEnvScope returns an environment with the changes needed for a n"
 #"ew scope."
) 0 0 22 29 1 #"\n"
0 0 17 3 55 #";;It basically changes the local tags to nonlocal ones."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 11 #"newEnvScope"
0 0 22 3 2 #" ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 28 3 5 #"vlist"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 2 #" ("
0 0 14 3 9 #"ScopeType"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 28 3 6 #"vararg"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 28 3 9 #"addLocals"
0 0 22 3 2 #" ("
0 0 28 3 12 #"addNonLocals"
0 0 22 3 2 #" ("
0 0 28 3 13 #"addGlobalVars"
0 0 22 3 2 #" ("
0 0 28 3 10 #"keepOldEnv"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 42 #"                                          "
0 0 28 3 5 #"vlist"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                           "
0 0 28 3 5 #"vlist"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 28 3 7 #"addArgs"
0 0 22 3 2 #" ("
0 0 34 3 6 #"filter"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 1 #"x"
0 0 22 3 3 #") ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" [("
0 0 15 3 13 #"define-values"
0 0 22 3 2 #" ("
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 2 #") "
0 0 28 3 1 #"x"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 45 #"                                            ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 6 #"Local?"
0 0 22 3 1 #" "
0 0 28 3 1 #"t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 48 #"                                                "
0 0 34 3 4 #"true"
0 0 22 29 1 #"\n"
0 0 22 3 48 #"                                                "
0 0 34 3 5 #"false"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                              "
0 0 28 3 5 #"vlist"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"no-vararg"
0 0 22 3 1 #" "
0 0 28 3 6 #"vararg"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                          "
0 0 28 3 4 #"args"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ("
0 0 34 3 6 #"append"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 1 #" "
0 0 28 3 6 #"vararg"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 34 3 6 #"filter"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 1 #"x"
0 0 22 3 3 #") ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" [("
0 0 15 3 13 #"define-values"
0 0 22 3 2 #" ("
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 2 #") "
0 0 28 3 1 #"x"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 36 #"                                   ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 6 #"Local?"
0 0 22 3 1 #" "
0 0 28 3 1 #"t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                       "
0 0 34 3 5 #"false"
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                       "
0 0 34 3 4 #"true"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                     "
0 0 28 3 5 #"vlist"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 61
#";;Adds a new identifier to our environment, with its location"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 10 #"augmentEnv"
0 0 22 3 2 #" ["
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ["
0 0 28 3 7 #"sltuple"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"SLTuple"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 8 #"hash-set"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 28 3 7 #"sltuple"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 44 #";;Adds a location and its Value to our Store"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 12 #"augmentStore"
0 0 22 3 2 #" ["
0 0 28 3 8 #"location"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 8 #"Location"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 28 3 5 #"value"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 8 #"hash-set"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 28 3 8 #"location"
0 0 22 3 1 #" "
0 0 28 3 5 #"value"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 72
(
 #";;inEnv? searches the environment for some identifier, returning tru"
 #"e if"
) 0 0 22 29 1 #"\n"
0 0 17 3 53 #";;the identifier is already there and false otherwise"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 6 #"inEnv?"
0 0 22 3 2 #" ["
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 7 #"SLTuple"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"none"
0 0 22 3 4 #" () "
0 0 34 3 5 #"false"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 2 #") "
0 0 34 3 4 #"true"
0 0 22 3 3 #"]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 66
#";;getScopeType gets the ScopeType of 'id' in the environment 'env'"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 12 #"getScopeType"
0 0 22 3 2 #" ["
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 9 #"ScopeType"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 7 #"SLTuple"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"getScopeType"
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 23 #"\"Unbound Identifier : \""
0 0 22 3 2 #" ("
0 0 34 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 3 #") ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" [("
0 0 15 3 13 #"define-values"
0 0 22 3 2 #" ("
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 28 3 1 #"l"
0 0 22 3 2 #") "
0 0 28 3 1 #"v"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"                "
0 0 28 3 1 #"t"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 56 #";;lookupEnv searches the environment for some identifier"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 9 #"lookupEnv"
0 0 22 3 2 #" ["
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 8 #"Location"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 7 #"SLTuple"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"lookupEnv"
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 28 #"\"Unbound identifier error: \""
0 0 22 3 2 #" ("
0 0 34 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 3 #") ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" [("
0 0 15 3 13 #"define-values"
0 0 22 3 2 #" ("
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 28 3 1 #"l"
0 0 22 3 2 #") "
0 0 28 3 1 #"v"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"                "
0 0 17 3 93
(
 #";(begin (display (string-append (s"
 #"tring-append (symbol->string id) \" \") (to-string l)))l))]))"
) 0 0 22 29 1 #"\n"
0 0 22 3 16 #"                "
0 0 28 3 1 #"l"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"                "
0 0 22 29 1 #"\n"
0 0 17 3 57 #";;lookupStore searches the store for an specific location"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 11 #"lookupStore"
0 0 22 3 2 #" ["
0 0 28 3 3 #"loc"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 8 #"Location"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 28 3 3 #"loc"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 11 #"lookupStore"
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-append"
0 0 22 3 2 #" ("
0 0 34 3 9 #"to-string"
0 0 22 3 1 #" "
0 0 28 3 3 #"loc"
0 0 22 3 2 #") "
0 0 19 3 25 #"\"Unbound location error.\""
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ["
0 0 14 3 8 #"VUnbound"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 11 #"lookupStore"
0 0 22 3 1 #" "
0 0 19 3 56
#"\"Unbound Identifier: using identifier before assignment\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ["
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 5 #"])]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 74
(
 #"; lookupEnvStore merges functionality and allows exceptions to be th"
 #"rown. "
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 14 #"lookupEnvStore"
0 0 22 3 2 #" ["
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 7 #"SLTuple"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 4 #"CApp"
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 17 #"UnboundLocalError"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ("
0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ("
0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ("
0 0 34 3 5 #"CHash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"cType"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"list\""
0 0 22 3 2 #" ("
0 0 34 3 5 #"CNone"
0 0 22 3 5 #")))) "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 3 #"loc"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #" ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" [("
0 0 15 3 13 #"define-values"
0 0 22 3 2 #" ("
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 28 3 1 #"l"
0 0 22 3 2 #") "
0 0 28 3 3 #"loc"
0 0 22 3 3 #")] "
0 0 28 3 1 #"l"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 14 #"lookupEnvStore"
0 0 22 3 1 #" "
0 0 19 3 37 #"\"Something is missing from the store\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ["
0 0 14 3 8 #"VUnbound"
0 0 22 3 5 #" () ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 4 #"CApp"
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 17 #"UnboundLocalError"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 60
#"                                                           ("
0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 60
#"                                                           ("
0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 60
#"                                                           ("
0 0 34 3 5 #"CHash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"cType"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"list\""
0 0 22 3 2 #" ("
0 0 34 3 5 #"CNone"
0 0 22 3 5 #")))) "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 6 #"ValueA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 8 #")])])]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 94
(
 #";;lookupVar searches for the identifier first at the given environme"
 #"nt, then at the globalEnv."
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 9 #"lookupVar"
0 0 22 3 2 #" ["
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 8 #"Location"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 7 #"SLTuple"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 28 3 9 #"lookupEnv"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 30 3 9 #"globalEnv"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 3 #") ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" [("
0 0 15 3 13 #"define-values"
0 0 22 3 2 #" ("
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 28 3 1 #"l"
0 0 22 3 2 #") "
0 0 28 3 1 #"v"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"                "
0 0 17 3 96
(
 #";(begin (display (string-append (s"
 #"tring-append (symbol->string id) \" -- \") (to-string l)))l))]))"
) 0 0 22 29 1 #"\n"
0 0 22 3 16 #"                "
0 0 28 3 1 #"l"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 68
#";;puts the default args of the function in the places with CUnbounds"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 16 #"add-default-args"
0 0 22 3 2 #" ["
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ["
0 0 28 3 8 #"defaults"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 4 #")]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 3 #") ("
0 0 34 3 4 #"list"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 34 3 4 #"last"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 3 #") ("
0 0 34 3 8 #"VUnbound"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 34 3 6 #"append"
0 0 22 3 2 #" ("
0 0 28 3 16 #"add-default-args"
0 0 22 3 2 #" ("
0 0 34 3 10 #"drop-right"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 36 #"                                   ("
0 0 34 3 10 #"drop-right"
0 0 22 3 1 #" "
0 0 28 3 8 #"defaults"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 34 3 4 #"list"
0 0 22 3 2 #" ("
0 0 34 3 4 #"last"
0 0 22 3 1 #" "
0 0 28 3 8 #"defaults"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 34 3 6 #"append"
0 0 22 3 2 #" ("
0 0 28 3 16 #"add-default-args"
0 0 22 3 2 #" ("
0 0 34 3 10 #"drop-right"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                   "
0 0 28 3 8 #"defaults"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 34 3 4 #"list"
0 0 22 3 2 #" ("
0 0 34 3 4 #"last"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 7 #"))))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 44 #";(define (interp-starargs-CApp [body : CExp]"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";                              [env : Env]"
0 0 22 29 1 #"\n"
0 0 17 3 46 #";                              [closEnv : Env]"
0 0 22 29 1 #"\n"
0 0 17 3 46 #";                              [store : Store]"
0 0 22 29 1 #"\n"
0 0 17 3 58
#";                              [argsIds : (listof symbol)]"
0 0 22 29 1 #"\n"
0 0 17 3 64
#";                              [interpretedArgs : (listof CVal)]"
0 0 22 29 1 #"\n"
0 0 17 3 56 #";                              [defargs : (listof CVal)]"
0 0 22 29 1 #"\n"
0 0 17 3 55 #";                              [star : CExp]) : AnswerC"
0 0 22 29 1 #"\n"
0 0 17 3 49 #";  (type-case AnswerC (interp-env star env store)"
0 0 22 29 1 #"\n"
0 0 17 3 36 #";    [ValueA (v s) (type-case CVal v"
0 0 22 29 1 #"\n"
0 0 17 3 58
#";                    [VHash (elts uid t) (interp-CApp body"
0 0 22 29 1 #"\n"
0 0 17 3 78
(
 #";                                                     (allocateLocal"
 #"s closEnv)"
) 0 0 22 29 1 #"\n"
0 0 17 3 55 #";                                                     s"
0 0 22 29 1 #"\n"
0 0 17 3 61
#";                                                     argsIds"
0 0 22 29 1 #"\n"
0 0 17 3 79
(
 #";                                                     (add-default-a"
 #"rgs (append"
) 0 0 22 29 1 #"\n"
0 0 17 3 98
(
 #";                                                                   "
 #"     (reverse interpretedArgs)"
) 0 0 22 29 1 #"\n"
0 0 17 3 100
(
 #";                                                                   "
 #"     (collapse-vhash-args v 0)) "
) 0 0 22 29 1 #"\n"
0 0 17 3 82
(
 #";                                                                   "
 #"    defargs))]"
) 0 0 22 29 1 #"\n"
0 0 17 3 70
(
 #";                    [else (error 'interp-starargs-CApp \"non-hash\""
 #")])]"
) 0 0 22 29 1 #"\n"
0 0 17 3 40 #";    [ExceptionA (v s) (ExceptionA v s)]"
0 0 22 29 1 #"\n"
0 0 17 3 36 #";    [ReturnA (v s) (ReturnA v s)]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 31 #";; Should implement starargs..."
0 0 22 29 1 #"\n"
0 0 17 3 17 #";; requires VHash"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 19 #"collapse-vhash-args"
0 0 22 3 2 #" ["
0 0 28 3 5 #"vhash"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #"] ["
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 2 #"<="
0 0 22 3 2 #" ("
0 0 34 3 6 #"length"
0 0 22 3 2 #" ("
0 0 34 3 9 #"hash-keys"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 2 #" ("
0 0 34 3 10 #"VHash-elts"
0 0 22 3 1 #" "
0 0 28 3 5 #"vhash"
0 0 22 3 5 #")))) "
0 0 28 3 1 #"n"
0 0 22 3 3 #") ("
0 0 34 3 4 #"list"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 2 #" ("
0 0 34 3 10 #"VHash-elts"
0 0 22 3 1 #" "
0 0 28 3 5 #"vhash"
0 0 22 3 4 #")) ("
0 0 34 3 4 #"VNum"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 4 #"cons"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #" ("
0 0 28 3 19 #"collapse-vhash-args"
0 0 22 3 1 #" "
0 0 28 3 5 #"vhash"
0 0 22 3 2 #" ("
0 0 34 3 1 #"+"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 19 #"collapse-vhash-args"
0 0 22 3 1 #" "
0 0 19 3 20 #"\"Missing element...\""
0 0 22 3 6 #")])]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 36 #";; helper method for our interpreter"
0 0 22 29 1 #"\n"
0 0 17 3 50 #";; this interps each argument to a CVal and calls "
0 0 22 29 1 #"\n"
0 0 17 3 91
(
 #";; another helper that will put them in the env/store, before finall"
 #"y interpreting the body"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 16 #"interp-args-CApp"
0 0 22 3 2 #" ["
0 0 28 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ["
0 0 28 3 7 #"closEnv"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ["
0 0 28 3 7 #"argsIds"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ["
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ["
0 0 28 3 15 #"interpretedArgs"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ["
0 0 28 3 7 #"defargs"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                          "
0 0 17 3 14 #";[star : CExp]"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                          ) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 17 3 27 #";(interp-starargs-CApp body"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 17 3 40 #";                                    env"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 17 3 44 #";                                    closEnv"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 17 3 42 #";                                    store"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 17 3 44 #";                                    argsIds"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 17 3 52 #";                                    interpretedArgs"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 17 3 44 #";                                    defargs"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 17 3 43 #";                                    star)]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 28 3 11 #"interp-CApp"
0 0 22 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 28 3 14 #"allocateLocals"
0 0 22 3 1 #" "
0 0 28 3 7 #"closEnv"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                  "
0 0 28 3 5 #"store"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                  "
0 0 28 3 7 #"argsIds"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 28 3 16 #"add-default-args"
0 0 22 3 2 #" ("
0 0 34 3 7 #"reverse"
0 0 22 3 1 #" "
0 0 28 3 15 #"interpretedArgs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 36 #"                                    "
0 0 28 3 7 #"defargs"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 63
#"                              (append (reverse interpretedArgs)"
0 0 17 29 1 #"\n"
0 0 17 3 57 #"                                      (list-tail defargs "
0 0 17 29 1 #"\n"
0 0 17 3 68
#"                                                 (- (length defargs)"
0 0 17 29 1 #"\n"
0 0 17 3 72
(
 #"                                                    (- (length argsI"
 #"ds) "
) 0 0 17 29 1 #"\n"
0 0 17 3 90
(
 #"                                                       (length inter"
 #"pretedArgs))))))]     "
) 0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 2 #") "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 28 3 16 #"interp-args-CApp"
0 0 22 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                 "
0 0 28 3 3 #"env"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                 "
0 0 28 3 7 #"closEnv"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                 "
0 0 28 3 1 #"s"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                 "
0 0 28 3 7 #"argsIds"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                 ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                 ("
0 0 34 3 4 #"cons"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 15 #"interpretedArgs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                 "
0 0 28 3 7 #"defargs"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                 "
0 0 17 3 5 #";star"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                 )]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 16 #"interp-args-CApp"
0 0 22 3 1 #" "
0 0 19 3 14 #"\"Why a break?\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 16 #"interp-args-CApp"
0 0 22 3 1 #" "
0 0 19 3 17 #"\"Why a continue?\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 6 #")])]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 135
(
 #";;helper method that allocates a new position for all of the local v"
 #"ariables in the environment. Used when applying a function, because"
) 0 0 22 29 1 #"\n"
0 0 17 3 73
(
 #";;each time we apply we are using new arguments/locals, not the old "
 #"ones."
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 14 #"allocateLocals"
0 0 22 3 2 #" ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 5 #"foldl"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 3 #"key"
0 0 22 3 1 #" "
0 0 28 3 6 #"newEnv"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 7 #"SLTuple"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 3 #"key"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 14 #"allocateLocals"
0 0 22 3 1 #" "
0 0 19 3 81
(
 #"\"Cannot find key inside hash with this key in hash-keys: something "
 #"is very wrong\""
) 0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 3 #") ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" [("
0 0 15 3 13 #"define-values"
0 0 22 3 2 #" ("
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 28 3 1 #"l"
0 0 22 3 2 #") "
0 0 28 3 1 #"v"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 9 #"ScopeType"
0 0 22 3 1 #" "
0 0 28 3 1 #"t"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ["
0 0 14 3 5 #"Local"
0 0 22 3 5 #" () ("
0 0 28 3 10 #"augmentEnv"
0 0 22 3 1 #" "
0 0 28 3 3 #"key"
0 0 22 3 2 #" ("
0 0 34 3 6 #"values"
0 0 22 3 1 #" "
0 0 28 3 1 #"t"
0 0 22 3 2 #" ("
0 0 28 3 7 #"new-loc"
0 0 22 3 3 #")) "
0 0 28 3 6 #"newEnv"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 28 3 10 #"augmentEnv"
0 0 22 3 1 #" "
0 0 28 3 3 #"key"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 6 #"newEnv"
0 0 22 3 7 #")]))]))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 34 3 9 #"hash-keys"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 71
(
 #";;puts all the identifiers and values in the environment and the sto"
 #"re,"
) 0 0 22 29 1 #"\n"
0 0 17 3 37 #";;and applies the body of the closure"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 11 #"interp-CApp"
0 0 22 3 2 #" ["
0 0 28 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 28 3 7 #"closEnv"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 28 3 7 #"argsIds"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 4 #")]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 3 #"not"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 34 3 6 #"length"
0 0 22 3 1 #" "
0 0 28 3 7 #"argsIds"
0 0 22 3 3 #") ("
0 0 34 3 6 #"length"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 6 #"CError"
0 0 22 3 2 #" ("
0 0 34 3 4 #"CApp"
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"TypeError"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ("
0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ("
0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ("
0 0 34 3 5 #"CHash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"cType"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"list\""
0 0 22 3 2 #" ("
0 0 34 3 5 #"CNone"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                 "
0 0 28 3 3 #"env"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                 "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"     (ExceptionA (VStr (string-append "
0 0 17 29 1 #"\n"
0 0 17 3 50 #"                        \"error in interp-CApp : \" "
0 0 17 29 1 #"\n"
0 0 17 3 39 #"                        (string-append "
0 0 17 29 1 #"\n"
0 0 17 3 39 #"                         (string-append"
0 0 17 29 1 #"\n"
0 0 17 3 57
#"                          \"number of expected arguments:\""
0 0 17 29 1 #"\n"
0 0 17 3 55 #"                          (to-string (length argsIds)))"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"                         (string-append"
0 0 17 29 1 #"\n"
0 0 17 3 57
#"                          \"number of received arguments:\""
0 0 17 29 1 #"\n"
0 0 17 3 55 #"                          (to-string (length args))))))"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"                 store)]"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"    ;|#"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 50 #"                                                  "
0 0 28 3 7 #"closEnv"
0 0 22 29 1 #"\n"
0 0 22 3 50 #"                                                  "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 6 #"ValueA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 11 #"interp-CApp"
0 0 22 3 1 #" "
0 0 19 3 40 #"\"Should not be a break in function call\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 11 #"interp-CApp"
0 0 22 3 1 #" "
0 0 19 3 43 #"\"Should not be a continue in function call\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 6 #"ValueA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 28 3 11 #"interp-CApp"
0 0 22 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                  "
0 0 28 3 7 #"closEnv"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 28 3 12 #"augmentStore"
0 0 22 3 2 #" ("
0 0 28 3 9 #"lookupEnv"
0 0 22 3 2 #" ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 7 #"argsIds"
0 0 22 3 2 #") "
0 0 28 3 7 #"closEnv"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                                "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 7 #"argsIds"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 5 #"))]))"
0 0 22 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"     (let ([newLocation (new-loc)])"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"       (interp-CApp body"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"                    (augmentEnv (first argsIds)"
0 0 17 29 1 #"\n"
0 0 17 3 60
#"                                (values (Local) newLocation)"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"                                closEnv)"
0 0 17 29 1 #"\n"
0 0 17 3 45 #"                    (augmentStore newLocation"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"                                  (first args)"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"                                  store)"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"                    (rest argsIds)"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"                    (rest args)))]))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 16 #";; tagof wrapper"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 12 #"interp-tagof"
0 0 22 3 2 #" ["
0 0 28 3 3 #"arg"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 3 #"] ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 3 #"] ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 28 3 7 #"get-tag"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 3 #")) "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"interp-tagof"
0 0 22 3 1 #" "
0 0 19 3 41 #"\"Should not be a break in input to tagof\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"interp-tagof"
0 0 22 3 1 #" "
0 0 19 3 44 #"\"Should not be a continue in input to tagof\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 56 #";; This is the tagof operator that we will need later..."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 7 #"get-tag"
0 0 22 3 2 #" ["
0 0 28 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"string"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 3 #"val"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 28 3 1 #"n"
0 0 22 3 2 #") "
0 0 17 3 61
#";\"int\"] ;; this really should distinguish ints from floats..."
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"            [("
0 0 34 3 7 #"fixnum?"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 2 #") "
0 0 19 3 5 #"\"int\""
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"            [("
0 0 34 3 7 #"flonum?"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 2 #") "
0 0 19 3 7 #"\"float\""
0 0 22 3 3 #"])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 2 #") "
0 0 19 3 8 #"\"string\""
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 8 #"VClosure"
0 0 22 3 2 #" ("
0 0 28 3 1 #"e"
0 0 22 3 1 #" "
0 0 28 3 1 #"a"
0 0 22 3 1 #" "
0 0 28 3 4 #"varg"
0 0 22 3 1 #" "
0 0 28 3 1 #"b"
0 0 22 3 1 #" "
0 0 28 3 7 #"defargs"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 2 #") "
0 0 19 3 10 #"\"function\""
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"VTrue"
0 0 22 3 4 #" () "
0 0 19 3 6 #"\"bool\""
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"VFalse"
0 0 22 3 4 #" () "
0 0 19 3 6 #"\"bool\""
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"VNone"
0 0 22 3 4 #" () "
0 0 19 3 10 #"\"NoneType\""
0 0 22 3 2 #"] "
0 0 17 3 65
#";; TODO this looks like a class name. Maybe we should make it so?"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"VPass"
0 0 22 3 4 #" () "
0 0 19 3 6 #"\"pass\""
0 0 22 3 2 #"] "
0 0 17 3 28 #";; should never be reached. "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 8 #"VUnbound"
0 0 22 3 4 #" () "
0 0 19 3 9 #"\"unbound\""
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 26 #";[VList (elts uid) \"list\"]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 26 #";[VDict (elts uid) \"dict\"]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 28 #";[VTuple (elts uid) \"tuple\"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 34 3 9 #"Type-name"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"           "
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 97
(
 #"           (if (or (equal? (Type-name type) \"class\") (equal? (Type"
 #"-name type) \"primitive-class\"))"
) 0 0 17 29 1 #"\n"
0 0 17 3 75
(
 #"               (type-case (optionof CVal) (hash-ref elts (VStr \"__n"
 #"ame__\"))"
) 0 0 17 29 1 #"\n"
0 0 17 3 44 #"                 [some (v) (type-case CVal v"
0 0 17 29 1 #"\n"
0 0 17 3 45 #"                             [VStr (str) str]"
0 0 17 29 1 #"\n"
0 0 17 3 94
(
 #"                             [else (error 'get-attr \"the name of a "
 #"class should be a VStr\")])]"
) 0 0 17 29 1 #"\n"
0 0 17 3 108
(
 #"                 [none () (error 'get-tag \"every class or primitive"
 #"-class should have the __name__ field\")])"
) 0 0 17 29 1 #"\n"
0 0 17 3 33 #"               (Type-name type))]"
0 0 17 29 1 #"\n"
0 0 17 3 3 #";|#"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"VClass"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 3 #") ("
0 0 34 3 9 #"Type-name"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 72
(
 #";; This is going to be an interp function that works on arbitrary CE"
 #"xps."
) 0 0 22 29 1 #"\n"
0 0 17 3 15 #";; interp-binop"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 12 #"interp-binop"
0 0 22 3 2 #" ["
0 0 28 3 2 #"op"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 3 #"] ["
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 3 #"] ["
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 3 #"] ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 3 #"] ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 9 #"handle-op"
0 0 22 3 1 #" "
0 0 28 3 2 #"op"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"interp-binop"
0 0 22 3 1 #" "
0 0 19 3 37 #"\"Why is there a break in second arg?\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"interp-binop"
0 0 22 3 1 #" "
0 0 19 3 40 #"\"Why is there a continue in second arg?\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"interp-binop"
0 0 22 3 1 #" "
0 0 19 3 36 #"\"Why is there a break in first arg?\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"interp-binop"
0 0 22 3 1 #" "
0 0 19 3 39 #"\"Why is there a continue in first arg?\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 16 #"duplicate-string"
0 0 22 3 2 #" ["
0 0 28 3 3 #"str"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"string"
0 0 22 3 3 #"] ["
0 0 28 3 3 #"num"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"string"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 7 #"flonum?"
0 0 22 3 1 #" "
0 0 28 3 3 #"num"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 16 #"duplicate-string"
0 0 22 3 1 #" "
0 0 19 3 30 #"\"does not work with floats...\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 2 #"<="
0 0 22 3 1 #" "
0 0 28 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 28 3 3 #"str"
0 0 22 3 2 #" ("
0 0 28 3 16 #"duplicate-string"
0 0 22 3 1 #" "
0 0 28 3 3 #"str"
0 0 22 3 2 #" ("
0 0 34 3 1 #"-"
0 0 22 3 1 #" "
0 0 28 3 3 #"num"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 6 #")))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 19 #";; just a helper..."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 11 #"repeat-list"
0 0 22 3 2 #" ["
0 0 28 3 3 #"lst"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 4 #")] ["
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 1 #"="
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #") "
0 0 34 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 6 #"append"
0 0 22 3 1 #" "
0 0 28 3 3 #"lst"
0 0 22 3 2 #" ("
0 0 28 3 11 #"repeat-list"
0 0 22 3 1 #" "
0 0 28 3 3 #"lst"
0 0 22 3 2 #" ("
0 0 34 3 1 #"-"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 6 #")))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 15 #"duplicate-tuple"
0 0 22 3 2 #" ["
0 0 28 3 3 #"tup"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"hashof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 4 #")] ["
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"hashof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 7 #"flonum?"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 15 #"duplicate-tuple"
0 0 22 3 1 #" "
0 0 19 3 30 #"\"does not work with floats...\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 2 #"<="
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #") ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 28 3 12 #"make-new-map"
0 0 22 3 2 #" ("
0 0 34 3 3 #"map"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 1 #"x"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VNum"
0 0 22 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ("
0 0 34 3 5 #"range"
0 0 22 3 2 #" ("
0 0 34 3 1 #"*"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                       "
0 0 17 3 53 #";(argmax (lambda (x) x) (map (lambda (x) (VNum-n x)) "
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                       ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 42 #"                                         ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 28 3 3 #"tup"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 42 #"                                         ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 42 #"                                         ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 5 #"duple"
0 0 22 3 1 #" "
0 0 19 3 15 #"\"no size field\""
0 0 22 3 6 #")]))))"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ("
0 0 28 3 11 #"repeat-list"
0 0 22 3 2 #" ("
0 0 28 3 11 #"hash-values"
0 0 22 3 1 #" "
0 0 28 3 3 #"tup"
0 0 22 3 2 #") "
0 0 28 3 1 #"n"
0 0 22 3 5 #"))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 10 #"cval-range"
0 0 22 3 2 #" ["
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 3 #"map"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 1 #"x"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VNum"
0 0 22 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"range"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 37 #";; Assumes we are dealing with VHashs"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 18 #"merge-python-lists"
0 0 22 3 2 #" ("
0 0 28 3 2 #"l1"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #") ("
0 0 28 3 2 #"l2"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #")) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"hashof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" (["
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 28 3 2 #"h1"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 2 #" ("
0 0 34 3 10 #"VHash-elts"
0 0 22 3 1 #" "
0 0 28 3 2 #"l1"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ["
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 28 3 2 #"h2"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 2 #" ("
0 0 34 3 10 #"VHash-elts"
0 0 22 3 1 #" "
0 0 28 3 2 #"l2"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ["
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 28 3 4 #"len2"
0 0 22 3 2 #" ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 28 3 2 #"h2"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 18 #"merge-python-lists"
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 5 #"\"?? \""
0 0 22 29 1 #"\n"
0 0 22 3 77
(
 #"                                                                    "
 #"        ("
) 0 0 34 3 9 #"to-string"
0 0 22 3 1 #" "
0 0 28 3 2 #"h2"
0 0 22 3 6 #")))])]"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ["
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 28 3 7 #"keylenh"
0 0 22 3 2 #" ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 28 3 2 #"h1"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 18 #"merge-python-lists"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"???1\""
0 0 22 3 5 #")])])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 34 3 8 #"hash-set"
0 0 22 3 2 #" ("
0 0 34 3 5 #"foldl"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 1 #"x"
0 0 22 3 1 #" "
0 0 28 3 1 #"h"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-set"
0 0 22 3 1 #" "
0 0 28 3 1 #"h"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 34 3 1 #"+"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 2 #") "
0 0 28 3 7 #"keylenh"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 46 #"                                             ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 28 3 2 #"h2"
0 0 22 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 48 #"                                               ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 2 #") "
0 0 28 3 1 #"s"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 48 #"                                               ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 18 #"merge-python-lists"
0 0 22 3 1 #" "
0 0 19 3 5 #"\"???\""
0 0 22 3 5 #")])))"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                     "
0 0 28 3 2 #"h1"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 28 3 10 #"cval-range"
0 0 22 3 1 #" "
0 0 28 3 4 #"len2"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 34 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 34 3 1 #"+"
0 0 22 3 1 #" "
0 0 28 3 7 #"keylenh"
0 0 22 3 1 #" "
0 0 28 3 4 #"len2"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 76
(
 #";;  (lambda (x) (hash-set h1 (VNum (+ (VNum-n x) keylenh)) (hash-ref"
 #" h2 x)))"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";(make-new-map (map (lambda (x) (VNum x)) "
0 0 22 29 1 #"\n"
0 0 17 3 103
(
 #";                  (range (* n (argmax (lambda (x) x) (map (lambda ("
 #"x) (VNum-n x)) (hash-keys tup))))))"
) 0 0 22 29 1 #"\n"
0 0 17 3 48 #";             (repeat-list (hash-values tup) n))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";; this function handles binary operations"
0 0 22 29 1 #"\n"
0 0 17 3 79
(
 #";; it does NO TYPE CHECKING! We will need to check types in library "
 #"functions. "
) 0 0 22 29 1 #"\n"
0 0 17 3 75
(
 #"; another case for the library functions: where else do we put the e"
 #"rrors? "
) 0 0 22 29 1 #"\n"
0 0 17 3 73
(
 #";; if we have regular exceptions, we will need to throw them higher "
 #"up..."
) 0 0 22 29 1 #"\n"
0 0 17 3 61
#";; Need a \"tagof\" unary operator. Doesn't python have \"type\"?"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 45 #";; We need separate float and intger values. "
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 16 #";; fold equality"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 13 #"fold-equality"
0 0 22 3 2 #" ["
0 0 28 3 2 #"h1"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 4 #")] ["
0 0 28 3 2 #"h2"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 4 #")]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 3 #"not"
0 0 22 3 2 #" ("
0 0 34 3 1 #"="
0 0 22 3 2 #" ("
0 0 34 3 6 #"length"
0 0 22 3 1 #" "
0 0 28 3 2 #"h1"
0 0 22 3 3 #") ("
0 0 34 3 6 #"length"
0 0 22 3 1 #" "
0 0 28 3 2 #"h2"
0 0 22 3 4 #"))) "
0 0 20 3 2 #"#f"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 2 #"h1"
0 0 22 3 2 #") "
0 0 20 3 2 #"#t"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 3 #"and"
0 0 22 3 2 #" ("
0 0 28 3 14 #"check-equality"
0 0 22 3 2 #" ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 2 #"h1"
0 0 22 3 3 #") ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 2 #"h2"
0 0 22 3 4 #")) ("
0 0 28 3 13 #"fold-equality"
0 0 22 3 2 #" ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 2 #"h1"
0 0 22 3 3 #") ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 2 #"h2"
0 0 22 3 6 #")))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 17 #";; check-equality"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 14 #"check-equality"
0 0 22 3 2 #" ["
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #"] ["
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 5 #"elts1"
0 0 22 3 1 #" "
0 0 28 3 4 #"uid1"
0 0 22 3 1 #" "
0 0 28 3 5 #"type1"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 5 #"elts2"
0 0 22 3 1 #" "
0 0 28 3 4 #"uid2"
0 0 22 3 1 #" "
0 0 28 3 5 #"type2"
0 0 22 3 3 #") ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 34 3 9 #"Type-name"
0 0 22 3 1 #" "
0 0 28 3 5 #"type1"
0 0 22 3 3 #") ("
0 0 34 3 9 #"Type-name"
0 0 22 3 1 #" "
0 0 28 3 5 #"type2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 62
#"                                                              "
0 0 17 3 82
(
 #";                              (equal? (unbox elts1) (unbox elts2)) "
 #";; TODO recur!"
) 0 0 22 29 1 #"\n"
0 0 22 3 63
#"                                                              ("
0 0 34 3 3 #"and"
0 0 22 3 2 #" ("
0 0 28 3 13 #"fold-equality"
0 0 22 3 2 #" ("
0 0 34 3 9 #"hash-keys"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 5 #"elts1"
0 0 22 3 4 #")) ("
0 0 34 3 9 #"hash-keys"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 5 #"elts2"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 68
#"                                                                   ("
0 0 28 3 13 #"fold-equality"
0 0 22 3 2 #" ("
0 0 28 3 11 #"hash-values"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 5 #"elts1"
0 0 22 3 4 #")) ("
0 0 28 3 11 #"hash-values"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 5 #"elts2"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 61
#"                                                             "
0 0 17 3 115
(
 #"; (and (foldl (lambda (a x y) (and a (check-equality x y))) #t (hash"
 #"-keys (unbox elts1)) (hash-keys (unbox elts2)))"
) 0 0 22 29 1 #"\n"
0 0 22 3 61
#"                                                             "
0 0 17 3 120
(
 #";      (foldl (lambda (a x y) (and a (check-equality x y))) #t (hash"
 #"-values (unbox elts1)) (hash-values (unbox elts2))))"
) 0 0 22 29 1 #"\n"
0 0 22 3 62
#"                                                              "
0 0 34 3 5 #"false"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                                "
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                                "
0 0 17 3 115
(
 #"; (and (foldl (lambda (a y) (and x y)) #t (map check-equality (hash-"
 #"keys (unbox elts1)) (hash-keys (unbox elts2))))"
) 0 0 22 29 1 #"\n"
0 0 22 3 31 #"                               "
0 0 17 3 120
(
 #";      (foldl (lambda (a y) (and x y)) #t (map check-equality (hash-"
 #"values (unbox elts1) (hash-values (unbox elts2))))))"
) 0 0 22 29 1 #"\n"
0 0 22 3 32 #"                                "
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                ["
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 34 3 5 #"false"
0 0 22 3 3 #"])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 59
#";; Also, this function should be in the \"primitives\" file. "
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 9 #"handle-op"
0 0 22 3 2 #" ["
0 0 28 3 2 #"op"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 3 #"] ["
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #"] ["
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"case"
0 0 22 3 1 #" "
0 0 28 3 2 #"op"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 2 #"eq"
0 0 22 3 2 #" ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 28 3 14 #"check-equality"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 3 #") ("
0 0 34 3 5 #"VTrue"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VFalse"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 5 #"notEq"
0 0 22 3 2 #" ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 28 3 14 #"check-equality"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VFalse"
0 0 22 3 3 #") ("
0 0 34 3 5 #"VTrue"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 4 #"num+"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 34 3 1 #"+"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 7 #"string+"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-append"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VStr-s"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VStr-s"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 4 #"num-"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 34 3 1 #"-"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 4 #"num*"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 34 3 1 #"*"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 4 #"num/"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 34 3 1 #"/"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 4 #"num%"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 34 3 6 #"modulo"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 6 #"num-lt"
0 0 22 3 2 #" ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 1 #"<"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"VTrue"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VFalse"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 9 #"string-lt"
0 0 22 3 2 #" ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 8 #"string<?"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VStr-s"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VStr-s"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"VTrue"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VFalse"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 7 #"num-lte"
0 0 22 3 2 #" ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 2 #"<="
0 0 22 3 2 #" ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"VTrue"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VFalse"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 10 #"string-lte"
0 0 22 3 2 #" ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 9 #"string<=?"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VStr-s"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VStr-s"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"VTrue"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VFalse"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 6 #"num-gt"
0 0 22 3 2 #" ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 1 #">"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"VTrue"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VFalse"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 9 #"string-gt"
0 0 22 3 2 #" ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 8 #"string>?"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VStr-s"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VStr-s"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"VTrue"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VFalse"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 7 #"num-gte"
0 0 22 3 2 #" ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 2 #">="
0 0 22 3 2 #" ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"VTrue"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VFalse"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 10 #"string-gte"
0 0 22 3 2 #" ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 9 #"string>=?"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VStr-s"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VStr-s"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"VTrue"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VFalse"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 9 #"duplicate"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 28 3 16 #"duplicate-string"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VStr-s"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 5 #")))] "
0 0 17 3 39 #";; throws exception if types are wrong."
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 5 #"duple"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 34 3 3 #"box"
0 0 22 3 2 #" ("
0 0 28 3 15 #"duplicate-tuple"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 2 #" ("
0 0 34 3 10 #"VHash-elts"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 4 #")) ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 5 #"))) ("
0 0 28 3 7 #"new-uid"
0 0 22 3 3 #") ("
0 0 34 3 10 #"VHash-type"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 28 3 2 #"op"
0 0 22 3 1 #" "
0 0 19 3 33 #"\"handle-op: case not implemented\""
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 48 #";;or returns e1 if its value is truthy; if not, "
0 0 22 29 1 #"\n"
0 0 17 3 20 #";;returns e2's value"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 9 #"interp-or"
0 0 22 3 2 #" ["
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ["
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 28 3 8 #"isTruthy"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 34 3 6 #"ValueA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"interp-or"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"Break!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"interp-or"
0 0 22 3 1 #" "
0 0 19 3 11 #"\"Continue!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 51 #";;and returns e1 if its value is not truthy; else, "
0 0 22 29 1 #"\n"
0 0 17 3 20 #";;returns e2's value"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-and"
0 0 22 3 2 #" ["
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ["
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 3 #"not"
0 0 22 3 2 #" ("
0 0 28 3 8 #"isTruthy"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 34 3 6 #"ValueA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 10 #"interp-and"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"Break!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 10 #"interp-and"
0 0 22 3 1 #" "
0 0 19 3 11 #"\"Continue!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 53 #";;  get-uid returns the uid for any type that has one"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 7 #"get-uid"
0 0 22 3 2 #" ["
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Uid"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 8 #"VClosure"
0 0 22 3 2 #" ("
0 0 28 3 1 #"e"
0 0 22 3 1 #" "
0 0 28 3 1 #"a"
0 0 22 3 1 #" "
0 0 28 3 4 #"varg"
0 0 22 3 1 #" "
0 0 28 3 1 #"b"
0 0 22 3 1 #" "
0 0 28 3 7 #"defargs"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 2 #") "
0 0 28 3 3 #"uid"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 23 #";[VList (elts uid) uid]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 23 #";[VDict (elts uid) uid]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 28 3 3 #"uid"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 7 #"get-uid"
0 0 22 3 1 #" "
0 0 19 3 57
#"\"should not use get-uid for types that do not have Uid's\""
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 60
#";;is returns true if e1 and e2 are the same object in python"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 9 #"interp-is"
0 0 22 3 2 #" ["
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ["
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ["
0 0 14 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 28 3 2 #"n1"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                     ["
0 0 14 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 28 3 2 #"n2"
0 0 22 3 3 #") ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 28 3 2 #"n1"
0 0 22 3 1 #" "
0 0 28 3 2 #"n2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                    ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VTrue"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                    ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VFalse"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                     ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VFalse"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ["
0 0 14 3 5 #"VNone"
0 0 22 3 5 #" () ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 29 1 #"\n"
0 0 22 3 37 #"                                    ["
0 0 14 3 5 #"VNone"
0 0 22 3 5 #" () ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VTrue"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 37 #"                                    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VFalse"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ["
0 0 14 3 5 #"VTrue"
0 0 22 3 5 #" () ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 29 1 #"\n"
0 0 22 3 37 #"                                    ["
0 0 14 3 5 #"VTrue"
0 0 22 3 5 #" () ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VTrue"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 37 #"                                    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VFalse"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ["
0 0 14 3 6 #"VFalse"
0 0 22 3 5 #" () ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                     ["
0 0 14 3 6 #"VFalse"
0 0 22 3 5 #" () ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VTrue"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                     ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VFalse"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ["
0 0 14 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 28 3 4 #"str1"
0 0 22 3 3 #") ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 42 #"                                         ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VTrue"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 42 #"                                         ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VFalse"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 28 3 7 #"get-uid"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #") ("
0 0 28 3 7 #"get-uid"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VTrue"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VFalse"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 5 #"))])]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"interp-is"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"Break!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"interp-is"
0 0 22 3 1 #" "
0 0 19 3 11 #"\"Continue!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"interp-is"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"Break!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"interp-is"
0 0 22 3 1 #" "
0 0 19 3 11 #"\"Continue!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 70
(
 #";;'is not' returns true if e1 and e2 are not the same object in pyth"
 #"on"
) 0 0 22 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"(define (interp-isNot [e1 : CExp]"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"                      [e2 : CExp]"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"                      [env : Env]"
0 0 17 29 1 #"\n"
0 0 17 3 48 #"                      [store : Store]) : AnswerC"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"  (type-case AnswerC (interp-env e1 env store)"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"    [ValueA (v1 s1)"
0 0 17 29 1 #"\n"
0 0 17 3 53 #"            (type-case AnswerC (interp-env e2 env s1)"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"              [ValueA (v2 s2)"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"                      (type-case CVal v1"
0 0 17 29 1 #"\n"
0 0 17 3 53 #"                        [VNum (n1) (type-case CVal v2"
0 0 17 29 1 #"\n"
0 0 17 3 66
#"                                     [VNum (n2) (if (equal? n1 n2)"
0 0 17 29 1 #"\n"
0 0 17 3 72
(
 #"                                                    (ValueA (VFalse)"
 #" s2)"
) 0 0 17 29 1 #"\n"
0 0 17 3 73
(
 #"                                                    (ValueA (VTrue) "
 #"s2))]"
) 0 0 17 29 1 #"\n"
0 0 17 3 65
#"                                     [else (ValueA (VTrue) s2)])]"
0 0 17 29 1 #"\n"
0 0 17 3 116
(
 #"                        [else (error 'interp-isNot (string-append \""
 #"comparison not valid for arguments of this type\" "
) 0 0 17 29 1 #"\n"
0 0 17 3 116
(
 #"                                                                  (s"
 #"tring-append (to-string v1) (to-string v2))))])]"
) 0 0 17 29 1 #"\n"
0 0 17 3 49 #"              [ExceptionA (v s) (ExceptionA v s)]"
0 0 17 29 1 #"\n"
0 0 17 3 49 #"              [ReturnA (v2 s2) (ReturnA v2 s2)])]"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"    [ExceptionA (v s) (ExceptionA v s)]"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"    [ReturnA (v1 s1) (ReturnA v1 s1)]))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 11 #"hash-values"
0 0 22 3 2 #" ["
0 0 28 3 1 #"h"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"hashof"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 22 3 4 #")]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 3 #"map"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 1 #"x"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 28 3 1 #"h"
0 0 22 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 11 #"hash-values"
0 0 22 3 1 #" "
0 0 19 3 16 #"\"This exists...\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 2 #") "
0 0 28 3 1 #"v"
0 0 22 3 5 #"])) ("
0 0 34 3 9 #"hash-keys"
0 0 22 3 1 #" "
0 0 28 3 1 #"h"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; interp-in"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 9 #"interp-in"
0 0 22 3 2 #" ("
0 0 28 3 4 #"left"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 3 #") ("
0 0 28 3 5 #"right"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 3 #") ("
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 3 #") ("
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #")) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 4 #"left"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 5 #"right"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ["
0 0 14 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 28 3 4 #"str2"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                       ["
0 0 14 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 28 3 4 #"str1"
0 0 22 3 3 #") ("
0 0 34 3 2 #"if"
0 0 22 3 1 #" "
0 0 34 3 5 #"false"
0 0 22 3 1 #" "
0 0 17 3 44 #";; False, so that it typechecks. Need actual"
0 0 22 29 1 #"\n"
0 0 22 3 57 #"                                                        ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VTrue"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 2 #") "
0 0 17 3 14 #";; condition. "
0 0 22 29 1 #"\n"
0 0 22 3 57 #"                                                        ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VFalse"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                       ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"interp-in"
0 0 22 3 1 #" "
0 0 19 3 47 #"\"\\\"in\\\" not valid for these (differing?) types\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                        "
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 76
(
 #"                        [VList (elts uid) (if (member v1 (hash-value"
 #"s elts))"
) 0 0 17 29 1 #"\n"
0 0 17 3 65
#"                                              (ValueA (VTrue) s2)"
0 0 17 29 1 #"\n"
0 0 17 3 68
#"                                              (ValueA (VFalse) s2))]"
0 0 17 29 1 #"\n"
0 0 17 3 74
(
 #"                        [VDict (elts uid) (if (member v1 (hash-keys "
 #"elts))"
) 0 0 17 29 1 #"\n"
0 0 17 3 65
#"                                              (ValueA (VTrue) s2)"
0 0 17 29 1 #"\n"
0 0 17 3 68
#"                                              (ValueA (VFalse) s2))]"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                        |#"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 8 #"elts-box"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ("
0 0 34 3 4 #"cond"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                 [("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 34 3 9 #"Type-name"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 19 3 6 #"\"dict\""
0 0 22 3 3 #") ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 6 #"member"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 2 #" ("
0 0 34 3 9 #"hash-keys"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 8 #"elts-box"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 72
(
 #"                                                                    "
 #"   ("
) 0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VTrue"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 72
(
 #"                                                                    "
 #"   ("
) 0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VFalse"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                 [("
0 0 34 3 2 #"or"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 34 3 9 #"Type-name"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 19 3 6 #"\"list\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                      ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 34 3 9 #"Type-name"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 19 3 7 #"\"tuple\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                      ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 34 3 9 #"Type-name"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 19 3 5 #"\"set\""
0 0 22 3 4 #")) ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 6 #"member"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 2 #" ("
0 0 28 3 11 #"hash-values"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 8 #"elts-box"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 78
(
 #"                                                                    "
 #"         ("
) 0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VTrue"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 78
(
 #"                                                                    "
 #"         ("
) 0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VFalse"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 5 #"))])]"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"interp-in"
0 0 22 3 1 #" "
0 0 19 3 55
#"\"\\\"in\\\" is not valid for arguments of this type (yet?)\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"interp-in"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"Break!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"interp-in"
0 0 22 3 1 #" "
0 0 19 3 11 #"\"Continue!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"interp-in"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"Break!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"interp-in"
0 0 22 3 1 #" "
0 0 19 3 11 #"\"Continue!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";; handles merging of list and tuple types"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 18 #"merge-listy-things"
0 0 22 3 2 #" ("
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 3 #") ("
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 3 #") ("
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 3 #") ("
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #")) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 1 #" "
0 0 17 3 72
(
 #";; TODO not sure we need this function. But we can get rid of it lat"
 #"er. "
) 0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                        ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 9 #"elts-box1"
0 0 22 3 1 #" "
0 0 28 3 4 #"uid1"
0 0 22 3 1 #" "
0 0 28 3 5 #"type1"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 29 1 #"\n"
0 0 22 3 50 #"                                                 ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 9 #"elts-box2"
0 0 22 3 1 #" "
0 0 28 3 4 #"uid2"
0 0 22 3 1 #" "
0 0 28 3 5 #"type2"
0 0 22 3 3 #") ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 34 3 3 #"box"
0 0 22 3 2 #" ("
0 0 28 3 18 #"merge-python-lists"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 4 #")) ("
0 0 28 3 7 #"new-uid"
0 0 22 3 2 #") "
0 0 28 3 5 #"type1"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 50 #"                                                 ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 18 #"merge-listy-things"
0 0 22 3 1 #" "
0 0 19 3 33 #"\"This also should never happen. \""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                        ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 18 #"merge-listy-things"
0 0 22 3 1 #" "
0 0 19 3 28 #"\"This should never happen. \""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 18 #"merge-listy-things"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"Break!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 18 #"merge-listy-things"
0 0 22 3 1 #" "
0 0 19 3 11 #"\"Continue!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 18 #"merge-listy-things"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"Break!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 18 #"merge-listy-things"
0 0 22 3 1 #" "
0 0 19 3 11 #"\"Continue!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 62
#";; isTruthy returns false if the CVal value is False to python"
0 0 22 29 1 #"\n"
0 0 17 3 21 #";; and true otherwise"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 8 #"isTruthy"
0 0 22 3 2 #" ["
0 0 28 3 5 #"value"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 120
(
 #";;JUST A STUB!!!!!!!!!!! - We need to finish this ------------------"
 #"----------------------------;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 5 #"value"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"VTrue"
0 0 22 3 4 #" () "
0 0 34 3 4 #"true"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 28 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 1 #"="
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"              "
0 0 34 3 5 #"false"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"              "
0 0 34 3 4 #"true"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 1 #">"
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-length"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #") "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"              "
0 0 34 3 4 #"true"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"              "
0 0 34 3 5 #"false"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 1 #"t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"             [("
0 0 34 3 3 #"and"
0 0 22 3 2 #" ("
0 0 34 3 2 #"or"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 34 3 9 #"Type-name"
0 0 22 3 1 #" "
0 0 28 3 1 #"t"
0 0 22 3 2 #") "
0 0 19 3 6 #"\"list\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ("
0 0 34 3 2 #"or"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 34 3 9 #"Type-name"
0 0 22 3 1 #" "
0 0 28 3 1 #"t"
0 0 22 3 2 #") "
0 0 19 3 7 #"\"tuple\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 34 3 9 #"Type-name"
0 0 22 3 1 #" "
0 0 28 3 1 #"t"
0 0 22 3 2 #") "
0 0 19 3 6 #"\"dict\""
0 0 22 3 5 #"))) ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 62
#"                                                             ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 8 #"isTruthy"
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 27 #"\"Does not have size field:\""
0 0 22 29 1 #"\n"
0 0 22 3 103
(
 #"                                                                    "
 #"                                  ("
) 0 0 34 3 9 #"to-string"
0 0 22 3 1 #" "
0 0 28 3 5 #"value"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 62
#"                                                             ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 1 #"="
0 0 22 3 2 #" ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #") "
0 0 20 3 1 #"0"
0 0 22 3 5 #")])) "
0 0 34 3 5 #"false"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 34 3 4 #"true"
0 0 22 3 3 #"])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 8 #"VClosure"
0 0 22 3 2 #" ("
0 0 28 3 1 #"e"
0 0 22 3 1 #" "
0 0 28 3 1 #"a"
0 0 22 3 1 #" "
0 0 28 3 4 #"varg"
0 0 22 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 3 1 #" "
0 0 28 3 7 #"defargs"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 2 #") "
0 0 34 3 4 #"true"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"    [VList (elts uid)-keys "
0 0 17 29 1 #"\n"
0 0 17 3 40 #"           (if (empty? (hash-keys elts))"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"               false"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"               true)]"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"    [VDict (elts uid)"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"           (if (empty? (hash-keys elts))"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"               false"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"               true)]"
0 0 17 29 1 #"\n"
0 0 17 3 6 #"    |#"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 34 3 5 #"false"
0 0 22 3 3 #"]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 48 #";; TODO should just import these from desugar..."
0 0 22 29 1 #"\n"
0 0 17 3 47 #";(define (range [n : number]) : (listof number)"
0 0 22 29 1 #"\n"
0 0 17 3 33 #";  (reverse (range-backwards n)))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 57 #";(define (range-backwards [n : number]) : (listof number)"
0 0 22 29 1 #"\n"
0 0 17 3 8 #";  (cond"
0 0 22 29 1 #"\n"
0 0 17 3 21 #";    [(<= n 0) empty]"
0 0 22 29 1 #"\n"
0 0 17 3 54 #";    [else (cons (- n 1) (range-backwards (- n 1)))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 12 #"make-new-map"
0 0 22 3 2 #" ["
0 0 28 3 4 #"keys"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 4 #")] ["
0 0 28 3 4 #"vals"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 4 #")]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"hashof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 4 #"keys"
0 0 22 3 3 #") ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 5 #"cons?"
0 0 22 3 1 #" "
0 0 28 3 4 #"keys"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-set"
0 0 22 3 2 #" ("
0 0 28 3 12 #"make-new-map"
0 0 22 3 2 #" ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 4 #"keys"
0 0 22 3 3 #") ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 4 #"vals"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 4 #"keys"
0 0 22 3 3 #") ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 4 #"vals"
0 0 22 3 5 #"))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 24 #";; change-string-to-list"
0 0 22 29 1 #"\n"
0 0 17 3 32 #";; converts a string into a list"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 21 #"change-string-to-list"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"string"
0 0 22 3 3 #")) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"hashof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 28 3 12 #"make-new-map"
0 0 22 3 2 #" ("
0 0 34 3 3 #"map"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 1 #"x"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VNum"
0 0 22 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"range"
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-length"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 4 #"))) "
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 34 3 3 #"map"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 1 #"x"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 34 3 12 #"list->string"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 6 #")))) ("
0 0 34 3 12 #"string->list"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 46 #";; handle unary operations - akin to handle-op"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 12 #"handle-unary"
0 0 22 3 2 #" ["
0 0 28 3 4 #"prim"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 3 #"] ["
0 0 28 3 3 #"arg"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #"] ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 3 #"] ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"case"
0 0 22 3 1 #" "
0 0 28 3 4 #"prim"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 5 #"print"
0 0 22 3 2 #" ("
0 0 34 3 5 #"begin"
0 0 22 3 2 #" ("
0 0 34 3 7 #"display"
0 0 22 3 2 #" ("
0 0 34 3 6 #"pretty"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 3 3 #")) "
0 0 28 3 3 #"arg"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 28 3 8 #"isTruthy"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VFalse"
0 0 22 3 3 #") ("
0 0 34 3 5 #"VTrue"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 8 #"negative"
0 0 22 3 2 #" ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 14 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 28 3 1 #"n"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 34 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 4 #"))] "
0 0 17 3 27 #";; gotta be a better way..."
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 22 3 1 #" "
0 0 19 3 30 #"\"Tried to negate a non-number\""
0 0 22 3 5 #")])] "
0 0 17 3 32 #";; TODO handle errors outside..."
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 6 #"invert"
0 0 22 3 2 #" ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ["
0 0 14 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 28 3 1 #"n"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 34 3 11 #"bitwise-not"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"handle-unary"
0 0 22 3 1 #" "
0 0 19 3 30 #"\"Tried to invert a non-number\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 5 #"tagof"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 28 3 7 #"get-tag"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 6 #"length"
0 0 22 3 2 #" ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ["
0 0 14 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 28 3 3 #"str"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-length"
0 0 22 3 1 #" "
0 0 28 3 3 #"str"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"               "
0 0 17 3 52 #";[VList (elts uid) (VNum (length (hash-keys elts)))]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"               "
0 0 17 3 52 #";[VDict (elts uid) (VNum (length (hash-keys elts)))]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"               "
0 0 17 3 53 #";[VTuple (elts uid) (VNum (length (hash-keys elts)))]"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 1 #"t"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 34 3 6 #"length"
0 0 22 3 2 #" ("
0 0 34 3 9 #"hash-keys"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 5 #"))))]"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 13 #"interp-length"
0 0 22 3 1 #" "
0 0 19 3 60
#"\"Should only be called on strings, lists, dicts and tuples.\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 7 #"to-bool"
0 0 22 3 2 #" ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 28 3 8 #"isTruthy"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 3 3 #") ("
0 0 34 3 5 #"VTrue"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VFalse"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 9 #"to-string"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 34 3 6 #"pretty"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 8 #"to-float"
0 0 22 3 2 #" ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 14 3 6 #"VFalse"
0 0 22 3 5 #" () ("
0 0 34 3 4 #"VNum"
0 0 22 3 1 #" "
0 0 20 3 3 #"0.0"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 14 3 5 #"VTrue"
0 0 22 3 5 #" () ("
0 0 34 3 4 #"VNum"
0 0 22 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 14 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 28 3 1 #"n"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 34 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 3 #"0.0"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 14 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 13 #"interp-to-num"
0 0 22 3 1 #" "
0 0 19 3 36 #"\"String to Num not implemented yet.\""
0 0 22 3 3 #")] "
0 0 17 3 25 #";; TODO handle outside..."
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 13 #"interp-to-num"
0 0 22 3 1 #" "
0 0 19 3 36 #"\"Should not be called on this type.\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 6 #"to-int"
0 0 22 3 2 #" ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ["
0 0 14 3 6 #"VFalse"
0 0 22 3 5 #" () ("
0 0 34 3 4 #"VNum"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ["
0 0 14 3 5 #"VTrue"
0 0 22 3 5 #" () ("
0 0 34 3 4 #"VNum"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ["
0 0 14 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 28 3 1 #"n"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VNum"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 3 #")] "
0 0 17 3 26 #";; TODO figure this out..."
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ["
0 0 14 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 13 #"interp-to-num"
0 0 22 3 1 #" "
0 0 19 3 36 #"\"String to Num not implemented yet.\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 13 #"interp-to-num"
0 0 22 3 1 #" "
0 0 19 3 36 #"\"Should not be called on this type.\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 7 #"to-list"
0 0 22 3 2 #" ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 3 #") ("
0 0 34 3 4 #"cond"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 43 #"                                         [("
0 0 34 3 2 #"or"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 28 3 7 #"get-tag"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 3 2 #") "
0 0 19 3 6 #"\"list\""
0 0 22 3 3 #") ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 28 3 7 #"get-tag"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 3 2 #") "
0 0 19 3 7 #"\"tuple\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 43 #"                                           "
0 0 17 3 92
(
 #";(if (or (isInstanceOf arg (Type \"list\" (CNone))) (isInstanceOf ar"
 #"g (Type \"tuple\" (CNone))))"
) 0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                           ("
0 0 34 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 34 3 3 #"box"
0 0 22 3 2 #" ("
0 0 34 3 8 #"hash-set"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 66
#"                                                                 ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 66
#"                                                                 ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 68
#"                                                                   ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 2 #") "
0 0 28 3 1 #"s"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 68
#"                                                                   ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 14 #"interp-to-list"
0 0 22 3 1 #" "
0 0 19 3 19 #"\"no __size__ field\""
0 0 22 3 6 #")]))) "
0 0 22 29 1 #"\n"
0 0 22 3 51 #"                                                  ("
0 0 28 3 7 #"new-uid"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 51 #"                                                  ("
0 0 28 3 15 #"transform-ctype"
0 0 22 3 2 #" ("
0 0 34 3 5 #"cType"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"list\""
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 4 #"list"
0 0 22 3 3 #")) "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 43 #"                                         [("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 28 3 7 #"get-tag"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 3 2 #") "
0 0 19 3 5 #"\"set\""
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 43 #"                                          ("
0 0 34 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 34 3 3 #"box"
0 0 22 3 2 #" ("
0 0 34 3 8 #"hash-set"
0 0 22 3 2 #" ("
0 0 28 3 12 #"make-new-map"
0 0 22 3 2 #" ("
0 0 28 3 10 #"vnum-range"
0 0 22 3 2 #" ("
0 0 34 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #" ("
0 0 34 3 6 #"length"
0 0 22 3 2 #" ("
0 0 34 3 9 #"hash-keys"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 79
(
 #"                                                                    "
 #"          ("
) 0 0 28 3 11 #"hash-values"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 65
#"                                                                ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 65
#"                                                                ("
0 0 34 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 34 3 6 #"length"
0 0 22 3 2 #" ("
0 0 34 3 9 #"hash-keys"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 50 #"                                                 ("
0 0 28 3 7 #"new-uid"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 50 #"                                                 ("
0 0 28 3 15 #"transform-ctype"
0 0 22 3 2 #" ("
0 0 34 3 5 #"cType"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"list\""
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 4 #"list"
0 0 22 3 3 #")) "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                           ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 14 #"interp-to-list"
0 0 22 3 1 #" "
0 0 19 3 42 #"\"arguments of this type are not supported\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ["
0 0 14 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 34 3 3 #"box"
0 0 22 3 2 #" ("
0 0 34 3 8 #"hash-set"
0 0 22 3 2 #" ("
0 0 28 3 21 #"change-string-to-list"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 3 #") ("
0 0 34 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-length"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 5 #")))) "
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                 ("
0 0 28 3 7 #"new-uid"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                 ("
0 0 28 3 15 #"transform-ctype"
0 0 22 3 2 #" ("
0 0 34 3 5 #"cType"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"list\""
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 4 #"list"
0 0 22 3 3 #")) "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 4 #"))] "
0 0 17 3 17 #";; string to list"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 14 #"interp-to-list"
0 0 22 3 1 #" "
0 0 19 3 18 #"\"Unsupported Type\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 8 #"to-tuple"
0 0 22 3 2 #" ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 3 #") ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 2 #"or"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 28 3 7 #"get-tag"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 3 2 #") "
0 0 19 3 6 #"\"list\""
0 0 22 3 3 #") ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 28 3 7 #"get-tag"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 3 2 #") "
0 0 19 3 7 #"\"tuple\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                            "
0 0 17 3 92
(
 #";(if (or (isInstanceOf arg (Type \"list\" (CNone))) (isInstanceOf ar"
 #"g (Type \"tuple\" (CNone))))"
) 0 0 22 29 1 #"\n"
0 0 22 3 45 #"                                            ("
0 0 34 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 34 3 3 #"box"
0 0 22 3 2 #" ("
0 0 34 3 8 #"hash-set"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 67
#"                                                                  ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 67
#"                                                                  ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 69
(
 #"                                                                    "
 #"["
) 0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 2 #") "
0 0 28 3 1 #"s"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 69
(
 #"                                                                    "
 #"["
) 0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 15 #"interp-to-tuple"
0 0 22 3 1 #" "
0 0 19 3 19 #"\"no __size__ field\""
0 0 22 3 5 #")])))"
0 0 22 29 1 #"\n"
0 0 22 3 52 #"                                                   ("
0 0 28 3 7 #"new-uid"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 52 #"                                                   ("
0 0 28 3 15 #"transform-ctype"
0 0 22 3 2 #" ("
0 0 34 3 5 #"cType"
0 0 22 3 1 #" "
0 0 19 3 7 #"\"tuple\""
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 5 #"tuple"
0 0 22 3 3 #")) "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 45 #"                                            ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 15 #"interp-to-tuple"
0 0 22 3 1 #" "
0 0 19 3 42 #"\"arguments of this type are not supported\""
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 14 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 34 3 3 #"box"
0 0 22 3 2 #" ("
0 0 34 3 8 #"hash-set"
0 0 22 3 2 #" ("
0 0 28 3 21 #"change-string-to-list"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 3 #") ("
0 0 34 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-length"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 5 #")))) "
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ("
0 0 28 3 7 #"new-uid"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ("
0 0 28 3 15 #"transform-ctype"
0 0 22 3 2 #" ("
0 0 34 3 5 #"cType"
0 0 22 3 1 #" "
0 0 19 3 7 #"\"tuple\""
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 5 #"tuple"
0 0 22 3 3 #")) "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 4 #"))] "
0 0 17 3 17 #";; string to list"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 14 #"interp-to-list"
0 0 22 3 1 #" "
0 0 19 3 18 #"\"Unsupported Type\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 20 3 1 #"'"
0 0 14 3 6 #"to-set"
0 0 22 3 2 #" ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 3 #") ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 2 #"or"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 28 3 7 #"get-tag"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 3 2 #") "
0 0 19 3 6 #"\"list\""
0 0 22 3 3 #") ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 28 3 7 #"get-tag"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 3 2 #") "
0 0 19 3 7 #"\"tuple\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 43 #"                                          ("
0 0 34 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 34 3 3 #"box"
0 0 22 3 2 #" ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" [("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 28 3 2 #"sz"
0 0 22 3 2 #" ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 76
(
 #"                                                                    "
 #"       ["
) 0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #")] "
0 0 17 3 26 #";; TODO could be unsafe..."
0 0 22 29 1 #"\n"
0 0 22 3 76
(
 #"                                                                    "
 #"       ["
) 0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 13 #"interp-to-set"
0 0 22 3 1 #" "
0 0 19 3 27 #"\"List without a size field\""
0 0 22 3 5 #")]))]"
0 0 22 29 1 #"\n"
0 0 22 3 57 #"                                                        ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 3 #"map"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 1 #"x"
0 0 22 3 3 #") ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" [("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 2 #" ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 2 #") "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 100
(
 #"                                                                    "
 #"                               ["
) 0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 2 #"sv"
0 0 22 3 2 #") "
0 0 28 3 2 #"sv"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 100
(
 #"                                                                    "
 #"                               ["
) 0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 13 #"interp-to-set"
0 0 22 3 1 #" "
0 0 19 3 38 #"\"List or tuple with a missing element\""
0 0 22 3 5 #")]))]"
0 0 22 29 1 #"\n"
0 0 22 3 82
(
 #"                                                                    "
 #"             ("
) 0 0 34 3 6 #"values"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 5 #"))) ("
0 0 28 3 10 #"vnum-range"
0 0 22 3 1 #" "
0 0 28 3 2 #"sz"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 50 #"                                                 ("
0 0 28 3 7 #"new-uid"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 50 #"                                                 ("
0 0 28 3 15 #"transform-ctype"
0 0 22 3 2 #" ("
0 0 34 3 5 #"cType"
0 0 22 3 1 #" "
0 0 19 3 5 #"\"set\""
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 3 #"set"
0 0 22 3 3 #")) "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 43 #"                                          ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 13 #"interp-to-set"
0 0 22 3 1 #" "
0 0 19 3 48 #"\"Arguments of this type aren't supported here. \""
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ["
0 0 14 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 13 #"interp-to-set"
0 0 22 3 1 #" "
0 0 19 3 43 #"\"We weren't expecting to need this case...\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 13 #"interp-to-set"
0 0 22 3 1 #" "
0 0 19 3 18 #"\"Unsupported Type\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 28 3 4 #"prim"
0 0 22 3 1 #" "
0 0 19 3 36 #"\"handle-unary: Case not handled yet\""
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";; wrapper around unary operations"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 12 #"interp-unary"
0 0 22 3 2 #" ["
0 0 28 3 4 #"prim"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 3 #"] ["
0 0 28 3 3 #"arg"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 3 #"] ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 3 #"] ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 12 #"handle-unary"
0 0 22 3 1 #" "
0 0 28 3 4 #"prim"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #") "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"interp-unary"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"Break!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"interp-unary"
0 0 22 3 1 #" "
0 0 19 3 11 #"\"Continue!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 44 #";;interps every object represented as a hash"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 12 #"interp-CHash"
0 0 22 3 2 #" ["
0 0 28 3 4 #"keys"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 28 3 1 #"h"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"hashof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 28 3 4 #"type"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"VType"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 4 #"keys"
0 0 22 3 3 #") ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 34 3 3 #"box"
0 0 22 3 2 #" ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 5 #"))) ("
0 0 28 3 7 #"new-uid"
0 0 22 3 2 #") "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 5 #"cons?"
0 0 22 3 1 #" "
0 0 28 3 4 #"keys"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 4 #"keys"
0 0 22 3 2 #") "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 28 3 1 #"h"
0 0 22 3 2 #" ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 4 #"keys"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"interp-CHash"
0 0 22 3 1 #" "
0 0 19 3 68
(
 #"\"Cannot find key inside hash with this key: something is very wrong"
 #"\""
) 0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 5 #"value"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 5 #"value"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 12 #"interp-CHash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 4 #"keys"
0 0 22 3 2 #") "
0 0 28 3 1 #"h"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                           ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v3"
0 0 22 3 1 #" "
0 0 28 3 2 #"s3"
0 0 22 3 3 #") ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 34 3 5 #"begin"
0 0 22 3 2 #" ("
0 0 34 3 8 #"set-box!"
0 0 22 3 2 #" ("
0 0 34 3 10 #"VHash-elts"
0 0 22 3 1 #" "
0 0 28 3 2 #"v3"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-set"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 2 #" ("
0 0 34 3 10 #"VHash-elts"
0 0 22 3 1 #" "
0 0 28 3 2 #"v3"
0 0 22 3 3 #")) "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 4 #")) ("
0 0 34 3 10 #"VHash-elts"
0 0 22 3 1 #" "
0 0 28 3 2 #"v3"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 75
(
 #"                                                                    "
 #"      ("
) 0 0 34 3 9 #"VHash-uid"
0 0 22 3 1 #" "
0 0 28 3 2 #"v3"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 74
(
 #"                                                                    "
 #"      "
) 0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 67
#"                                                                   "
0 0 28 3 2 #"s3"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                           ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"interp-CHash"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"Break!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                           ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"interp-CHash"
0 0 22 3 1 #" "
0 0 19 3 11 #"\"Continue!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                           ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v3"
0 0 22 3 1 #" "
0 0 28 3 2 #"s3"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v3"
0 0 22 3 1 #" "
0 0 28 3 2 #"s3"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                           ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v3"
0 0 22 3 1 #" "
0 0 28 3 2 #"s3"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"interp-CHash"
0 0 22 3 1 #" "
0 0 19 3 32 #"\"Shouldn't see a return here...\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"interp-CHash"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"Break!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"interp-CHash"
0 0 22 3 1 #" "
0 0 19 3 11 #"\"Continue!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"interp-CHash"
0 0 22 3 1 #" "
0 0 19 3 32 #"\"This should never be a return.\""
0 0 22 3 6 #")])])]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"interp-CHash"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"Break!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"interp-CHash"
0 0 22 3 1 #" "
0 0 19 3 11 #"\"Continue!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"interp-CHash"
0 0 22 3 1 #" "
0 0 19 3 33 #"\"This should never be a return!!\""
0 0 22 3 6 #")])]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 73
(
 #";; TODO somehow we need to have a function to convert a CId into a s"
 #"tring"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 12 #"id-to-string"
0 0 22 3 2 #" ("
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 3 #")) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"string"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 3 #"CId"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"id-to-string"
0 0 22 3 1 #" "
0 0 19 3 11 #"\"Not an ID\""
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 13 #"get-typesList"
0 0 22 3 2 #" ["
0 0 28 3 3 #"obj"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 6 #"string"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 3 #"obj"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 3 #"not"
0 0 22 3 2 #" ("
0 0 34 3 2 #"or"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 34 3 9 #"Type-name"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 19 3 7 #"\"class\""
0 0 22 3 3 #") ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 34 3 9 #"Type-name"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 19 3 17 #"\"primitive-class\""
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 34 3 6 #"append"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 2 #" ("
0 0 34 3 9 #"Type-name"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ("
0 0 28 3 13 #"get-typesList"
0 0 22 3 2 #" ("
0 0 34 3 13 #"Type-baseType"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__name__\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 3 #") ("
0 0 34 3 6 #"append"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VStr-s"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 36 #"                                   ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 2 #" ("
0 0 34 3 13 #"Type-baseType"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                     ["
0 0 14 3 5 #"VNone"
0 0 22 3 5 #" () ("
0 0 34 3 4 #"list"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                     ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 28 3 13 #"get-typesList"
0 0 22 3 2 #" ("
0 0 34 3 13 #"Type-baseType"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 6 #"))]))]"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 13 #"get-typesList"
0 0 22 3 1 #" "
0 0 19 3 28 #"\"a class should have a name\""
0 0 22 3 5 #")]))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 2 #" ("
0 0 28 3 7 #"get-tag"
0 0 22 3 1 #" "
0 0 28 3 3 #"obj"
0 0 22 3 5 #"))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 145
(
 #";; -------------------------------------------------------------HAVE"
 #" TO ADAPT THIS TO INHERITANCE WHEN IT COMES THE TIME----------------"
 #"---------"
) 0 0 22 29 1 #"\n"
0 0 17 3 145
(
 #";; -------------------------------------------------------------HAVE"
 #" TO ADAPT THIS TO INHERITANCE WHEN IT COMES THE TIME----------------"
 #"---------"
) 0 0 22 29 1 #"\n"
0 0 17 3 94
(
 #";; isInstanceOf checks whether 'obj' is of the same type or of one o"
 #"f the base types of 'type'"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 12 #"isInstanceOf"
0 0 22 3 2 #" ["
0 0 28 3 3 #"obj"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 28 3 4 #"type"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"string"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 6 #"member"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #" ("
0 0 28 3 13 #"get-typesList"
0 0 22 3 1 #" "
0 0 28 3 3 #"obj"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 27 #";; wrapper for isInstanceOf"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 17 #"interp-isinstance"
0 0 22 3 2 #" ["
0 0 28 3 3 #"obj"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ["
0 0 28 3 4 #"type"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 3 #"obj"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 2 #") "
0 0 17 3 64
#";; This takes a string. Do we want to update it to take a class?"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 8 #"        "
0 0 17 3 67
#";; I think we probably should update it. But we can do that later. "
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                        ["
0 0 14 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 28 3 2 #"ty"
0 0 22 3 3 #") ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 28 3 12 #"isInstanceOf"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"ty"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 56 #"                                                       ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VTrue"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 56 #"                                                       ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VFalse"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                        ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 17 #"interp-isinstance"
0 0 22 3 1 #" "
0 0 19 3 31 #"\"This error should not appear.\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 19 #"interp-isi-instance"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"Break!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 18 #"interp-is-instance"
0 0 22 3 1 #" "
0 0 19 3 11 #"\"Continue!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 18 #"interp-is-instance"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"Break!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 18 #"interp-is-instance"
0 0 22 3 1 #" "
0 0 19 3 11 #"\"Continue!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                           "
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 78
(
 #";; NOT NECSSARY ANYMORE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
 #"!!!!!!!!!!"
) 0 0 22 29 1 #"\n"
0 0 17 3 81
(
 #";; helper function that interps a CExp (that is supposed to be a VHa"
 #"sh) to a type"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 10 #"CExpToType"
0 0 22 3 2 #" ["
0 0 28 3 4 #"type"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"VType"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 10 #"VHash-type"
0 0 22 3 2 #" ("
0 0 28 3 11 #"lookupStore"
0 0 22 3 2 #" ("
0 0 28 3 9 #"lookupVar"
0 0 22 3 2 #" ("
0 0 34 3 5 #"CId-x"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 28 3 3 #"env"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 91
(
 #";; TODO This needs to be adapted to work with integers and other pri"
 #"mitive types as well..."
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 92
(
 #";; hasMatchingException checks whether any of the except clauses dea"
 #"l with the raised object"
) 0 0 22 29 1 #"\n"
0 0 17 3 54 #";; we assume that the CExcHandler-type is always a CId"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 20 #"hasMatchingException"
0 0 22 3 2 #" ["
0 0 28 3 3 #"exc"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 2 #"] "
0 0 22 29 1 #"\n"
0 0 22 3 31 #"                              ["
0 0 28 3 8 #"handlers"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 17 #"CExceptionHandler"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 31 #"                              ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 31 #"                              ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 8 #"handlers"
0 0 22 3 2 #") "
0 0 34 3 5 #"false"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 5 #"cons?"
0 0 22 3 1 #" "
0 0 28 3 8 #"handlers"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 6 #"CNone?"
0 0 22 3 2 #" ("
0 0 34 3 16 #"CExcHandler-type"
0 0 22 3 2 #" ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 8 #"handlers"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 34 3 4 #"true"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 28 3 12 #"isInstanceOf"
0 0 22 3 1 #" "
0 0 28 3 3 #"exc"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 2 #" ("
0 0 34 3 16 #"CExcHandler-type"
0 0 22 3 2 #" ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 8 #"handlers"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 14 3 3 #"CId"
0 0 22 3 2 #" ("
0 0 28 3 1 #"x"
0 0 22 3 3 #") ("
0 0 34 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 20 #"hasMatchingException"
0 0 22 3 1 #" "
0 0 19 3 36 #"\"some CExcHandler-type is not an ID\""
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                           "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                           "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"             "
0 0 34 3 4 #"true"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 28 3 20 #"hasMatchingException"
0 0 22 3 1 #" "
0 0 28 3 3 #"exc"
0 0 22 3 2 #" ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 8 #"handlers"
0 0 22 3 2 #") "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 6 #")))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 139
(
 #";; THIS DOES NOT CATCH THE CORRECT EXCEPTION YET!!!!! WE NEED TO IMP"
 #"LEMENT TYPES BEFORE WE DO THIS. FOR NOW, WE JUST MATCH THE FIRST RES"
 #"ULT"
) 0 0 22 29 1 #"\n"
0 0 17 3 69
(
 #";; THIS ALSO DOES NOT IMPLEMENT THE BINDING OF THE NAME WITH THE TYP"
 #"E"
) 0 0 22 29 1 #"\n"
0 0 17 3 156
(
 #";; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
 #"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
 #"!!!!!!!!!!!!!!!!!!!!"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 15 #"interp-handlers"
0 0 22 3 2 #" ["
0 0 28 3 8 #"handlers"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 17 #"CExceptionHandler"
0 0 22 3 4 #")] ["
0 0 28 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #"] ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 3 #"] ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 8 #"handlers"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 3 #"val"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 5 #"cons?"
0 0 22 3 1 #" "
0 0 28 3 8 #"handlers"
0 0 22 3 3 #") ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 34 3 16 #"CExcHandler-name"
0 0 22 3 2 #" ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 8 #"handlers"
0 0 22 3 3 #")) "
0 0 34 3 1 #"'"
0 0 14 3 7 #"no-name"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 16 #"CExcHandler-body"
0 0 22 3 2 #" ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 8 #"handlers"
0 0 22 3 3 #")) "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" [("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 28 3 8 #"location"
0 0 22 3 2 #" ("
0 0 28 3 7 #"new-loc"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 16 #"CExcHandler-body"
0 0 22 3 2 #" ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 8 #"handlers"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                      ("
0 0 28 3 10 #"augmentEnv"
0 0 22 3 2 #" ("
0 0 34 3 16 #"CExcHandler-name"
0 0 22 3 2 #" ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 8 #"handlers"
0 0 22 3 4 #")) ("
0 0 34 3 6 #"values"
0 0 22 3 2 #" ("
0 0 34 3 5 #"Local"
0 0 22 3 2 #") "
0 0 28 3 8 #"location"
0 0 22 3 2 #") "
0 0 28 3 3 #"env"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                      ("
0 0 28 3 12 #"augmentStore"
0 0 22 3 1 #" "
0 0 28 3 8 #"location"
0 0 22 3 1 #" "
0 0 28 3 3 #"val"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 7 #"))))]))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 65
#";   (interp-env (CExcHandler-body (first handlers)) env store)]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 150
(
 #";; getAttr gets the attribute from an object (VHash) ---------------"
 #"--------------------------------------------throw an exception inste"
 #"ad of an error"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 7 #"getAttr"
0 0 22 3 2 #" ["
0 0 28 3 4 #"attr"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 28 3 3 #"obj"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 3 #"obj"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 2 #") "
0 0 28 3 4 #"attr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                             "
0 0 17 3 51 #";;if the object has the attribute we're looking for"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 2 #") "
0 0 28 3 1 #"v"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                             "
0 0 17 3 41 #";;else, we search in its super/base class"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 28 3 7 #"getAttr"
0 0 22 3 1 #" "
0 0 28 3 4 #"attr"
0 0 22 29 1 #"\n"
0 0 22 3 47 #"                                               "
0 0 17 3 3 #";#|"
0 0 22 29 1 #"\n"
0 0 22 3 48 #"                                               ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 2 #" ("
0 0 34 3 13 #"Type-baseType"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 50 #"                                                 ["
0 0 14 3 5 #"VNone"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 7 #"getAttr"
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 46 #"\"non-existent attribute, Unbound Identifier: \""
0 0 22 3 2 #" ("
0 0 34 3 9 #"to-string"
0 0 22 3 1 #" "
0 0 28 3 4 #"attr"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 50 #"                                                 ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 1 #"t"
0 0 22 3 3 #") ("
0 0 34 3 13 #"Type-baseType"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 50 #"                                                 ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 7 #"getAttr"
0 0 22 3 1 #" "
0 0 19 3 69
(
 #"\"a class has something other than a VNone or a VHash as its baseTyp"
 #"e\""
) 0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 47 #"                                               "
0 0 17 3 3 #";|#"
0 0 22 29 1 #"\n"
0 0 22 3 47 #"                                               "
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 90
(
 #"                                               (if (not (equal? (Typ"
 #"e-name type) \"class\"))"
) 0 0 17 29 1 #"\n"
0 0 17 3 149
(
 #"                                                   ;;if we're not lo"
 #"oking in a 'class object', we search for the attribute in the class "
 #"of the object"
) 0 0 17 29 1 #"\n"
0 0 17 3 120
(
 #"                                                   (lookupStore (loo"
 #"kupVar (string->symbol (Type-name type)) env) store)"
) 0 0 17 29 1 #"\n"
0 0 17 3 134
(
 #"                                                   ;;else, we check "
 #"if we're in a top-level class or if it inherits from another class"
) 0 0 17 29 1 #"\n"
0 0 17 3 92
(
 #"                                                   (if (equal? (Type"
 #"-baseType type) (VNone))"
) 0 0 17 29 1 #"\n"
0 0 17 3 156
(
 #"                                                       (error 'getAt"
 #"tr (string-append \"non-existent attribute, Unbound Identifier: \" ("
 #"symbol->string attr)))"
) 0 0 17 29 1 #"\n"
0 0 17 3 126
(
 #"                                                       ;;here, we as"
 #"sume that the tests just pass CId's to class constructors."
) 0 0 17 29 1 #"\n"
0 0 17 3 91
(
 #"                                                       (type-case CE"
 #"xp (Type-baseType type)"
) 0 0 17 29 1 #"\n"
0 0 17 3 106
(
 #"                                                         [CId (id) ("
 #"lookupStore (lookupVar id env) store)]"
) 0 0 17 29 1 #"\n"
0 0 17 3 140
(
 #"                                                         [else (erro"
 #"r 'getAttr \"a class has something"
 #" other than a CId as its baseType\")])))"
) 0 0 17 29 1 #"\n"
0 0 17 3 50 #"                                               ;|#"
0 0 22 29 1 #"\n"
0 0 22 3 47 #"                                               "
0 0 28 3 3 #"env"
0 0 22 29 1 #"\n"
0 0 22 3 47 #"                                               "
0 0 28 3 5 #"store"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 92
(
 #";[VClass (elts type) (type-case (optionof CVal) (hash-ref elts (VStr"
 #" (symbol->string attr)))"
) 0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 74
(
 #";                      [none () (error 'getAttr \"non-existent attri"
 #"bute\")]"
) 0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 37 #";                      [some (v) v])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 7 #"getAttr"
0 0 22 3 1 #" "
0 0 19 3 40 #"\"tried to get attribute from non-object\""
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 26 #";(define-type DefArgHolder"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 22 29 1 #"\n"
0 0 17 3 94
(
 #";(define (interp-defargs [defargs : (listof CExp)] [env : Env] [stor"
 #"e : Store]) : DefArgHolder"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 11 #"interp-func"
0 0 22 3 2 #" ["
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 28 3 6 #"vararg"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 28 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 2 #"] "
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 28 3 5 #"vlist"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 2 #" ("
0 0 14 3 9 #"ScopeType"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 28 3 7 #"defargs"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 3 #")] "
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 28 3 7 #"defvals"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 7 #"defargs"
0 0 22 3 3 #") ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 8 #"VClosure"
0 0 22 3 2 #" ("
0 0 28 3 11 #"newEnvScope"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"vlist"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 28 3 6 #"vararg"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                        "
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                        "
0 0 28 3 6 #"vararg"
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                        "
0 0 28 3 4 #"body"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                        ("
0 0 34 3 7 #"reverse"
0 0 22 3 1 #" "
0 0 28 3 7 #"defvals"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                        ("
0 0 28 3 7 #"new-uid"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                              "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 7 #"defargs"
0 0 22 3 2 #") "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 28 3 11 #"interp-func"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 28 3 6 #"vararg"
0 0 22 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 3 1 #" "
0 0 28 3 5 #"vlist"
0 0 22 3 2 #" ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 7 #"defargs"
0 0 22 3 3 #") ("
0 0 34 3 4 #"cons"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 7 #"defvals"
0 0 22 3 2 #") "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 11 #"interp-func"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"Break!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 11 #"interp-func"
0 0 22 3 1 #" "
0 0 19 3 11 #"\"Continue!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 11 #"interp-func"
0 0 22 3 1 #" "
0 0 19 3 40 #"\"I don't think this should even happen.\""
0 0 22 3 6 #")])]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 53 #";;creates a hash with all of the positional arguments"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 26 #"group-positional-arguments"
0 0 22 3 2 #" ["
0 0 28 3 3 #"ids"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 37 #"                                    ["
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 4 #")]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"hashof"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 2 #"or"
0 0 22 3 2 #" ("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 3 #") ("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 34 3 8 #"hash-set"
0 0 22 3 2 #" ("
0 0 28 3 26 #"group-positional-arguments"
0 0 22 3 2 #" ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                           ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 5 #"))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 89
(
 #";;adds the keyword arguments to the hash of arguments, and throws an"
 #" error if we have one"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 23 #"group-keyword-arguments"
0 0 22 3 2 #" ["
0 0 28 3 3 #"ids"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                 ["
0 0 28 3 8 #"keywargs"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 2 #" ("
0 0 14 3 6 #"symbol"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                 ["
0 0 28 3 7 #"argList"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"hashof"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 4 #")]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"hashof"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 8 #"keywargs"
0 0 22 3 2 #") "
0 0 28 3 7 #"argList"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" [("
0 0 15 3 13 #"define-values"
0 0 22 3 2 #" ("
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 28 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 8 #"keywargs"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 6 #"member"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 6 #"member"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 2 #" ("
0 0 34 3 9 #"hash-keys"
0 0 22 3 1 #" "
0 0 28 3 7 #"argList"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 23 #"group-keyword-arguments"
0 0 22 3 1 #" "
0 0 19 3 97
(
 #"\"keyword argument for argument already defined by positional argume"
 #"nt: throw TypeError exception\""
) 0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 28 3 23 #"group-keyword-arguments"
0 0 22 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                        ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 8 #"keywargs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                        ("
0 0 34 3 8 #"hash-set"
0 0 22 3 1 #" "
0 0 28 3 7 #"argList"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 28 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 23 #"group-keyword-arguments"
0 0 22 3 1 #" "
0 0 19 3 61
#"\"non-existing keyword argument: throw a TypeError exception.\""
0 0 22 3 6 #")))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 125
(
 #";;creates an ordered list of arguments with CUnbound representing th"
 #"e default arguments in the position of missing arguments."
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 19 #"group-all-arguments"
0 0 22 3 2 #" ["
0 0 28 3 3 #"ids"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 28 3 7 #"argList"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"hashof"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 28 3 8 #"varargid"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 28 3 7 #"varargs"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 4 #")]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 3 #"let"
0 0 22 3 3 #" [("
0 0 28 3 9 #"arguments"
0 0 22 3 2 #" ("
0 0 34 3 5 #"foldl"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 28 3 3 #"lst"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 28 3 7 #"argList"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 46 #"                                             ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 6 #"append"
0 0 22 3 1 #" "
0 0 28 3 3 #"lst"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 2 #" ("
0 0 34 3 8 #"CUnbound"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 46 #"                                             ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 3 #") ("
0 0 34 3 6 #"append"
0 0 22 3 1 #" "
0 0 28 3 3 #"lst"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 5 #"))]))"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ("
0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                          "
0 0 28 3 3 #"ids"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 3 #"not"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 28 3 8 #"varargid"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"no-vararg"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 34 3 6 #"append"
0 0 22 3 1 #" "
0 0 28 3 9 #"arguments"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 2 #" ("
0 0 28 3 12 #"create-clist"
0 0 22 3 1 #" "
0 0 28 3 7 #"varargs"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 28 3 9 #"arguments"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 104
(
 #";;checks if the list of arguments has some CUnbound in a position th"
 #"at is not from some default argument"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 20 #"group-check-defaults"
0 0 22 3 2 #" ["
0 0 28 3 3 #"ids"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 31 #"                              ["
0 0 28 3 8 #"nDefArgs"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 31 #"                              ["
0 0 28 3 8 #"argsList"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 4 #")]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 6 #"member"
0 0 22 3 2 #" ("
0 0 34 3 8 #"CUnbound"
0 0 22 3 3 #") ("
0 0 34 3 10 #"drop-right"
0 0 22 3 1 #" "
0 0 28 3 8 #"argsList"
0 0 22 3 1 #" "
0 0 28 3 8 #"nDefArgs"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 34 3 5 #"false"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 34 3 4 #"true"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 17 3 71
(
 #";(error 'group-arguments \"missing argument: throw TypeError excepti"
 #"on\")"
) 0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 17 3 11 #";argsList))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 154
(
 #";; group-arguments create a list of arguments in the correct order f"
 #"rom the list of positional args, keyword args and the number of exis"
 #"ting default args."
) 0 0 22 29 1 #"\n"
0 0 17 3 151
(
 #";; if varargid is different from 'no-vararg, adds a new argument to "
 #"the list of arguments, that is a list containing the positional argu"
 #"ments in excess"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 15 #"group-arguments"
0 0 22 3 2 #" ["
0 0 28 3 3 #"ids"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ["
0 0 28 3 8 #"varargid"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ["
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ["
0 0 28 3 8 #"keywargs"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 2 #" ("
0 0 14 3 6 #"symbol"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ["
0 0 28 3 8 #"nDefArgs"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ["
0 0 28 3 7 #"argList"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"hashof"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ["
0 0 28 3 7 #"varargs"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 4 #")]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 3 #"and"
0 0 22 3 2 #" ("
0 0 34 3 1 #"<"
0 0 22 3 2 #" ("
0 0 34 3 6 #"length"
0 0 22 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 3 #") ("
0 0 34 3 6 #"length"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 4 #")) ("
0 0 34 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 28 3 8 #"varargid"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"no-vararg"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 15 #"group-arguments"
0 0 22 3 1 #" "
0 0 19 3 92
(
 #"\"arity mismatch: more arguments than function can handle. Should th"
 #"row TypeError exception.\""
) 0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 3 #"not"
0 0 22 3 2 #" ("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 28 3 15 #"group-arguments"
0 0 22 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                      "
0 0 28 3 8 #"varargid"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                      "
0 0 28 3 8 #"keywargs"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                      "
0 0 28 3 8 #"nDefArgs"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 28 3 26 #"group-positional-arguments"
0 0 22 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 1 #"<"
0 0 22 3 2 #" ("
0 0 34 3 6 #"length"
0 0 22 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 3 #") ("
0 0 34 3 6 #"length"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ("
0 0 34 3 9 #"list-tail"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 2 #" ("
0 0 34 3 6 #"length"
0 0 22 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ("
0 0 34 3 4 #"list"
0 0 22 3 4 #")))]"
0 0 17 3 48 #"; (CHash (hash (list)) (Type \"list\" (list))))))]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 3 #"not"
0 0 22 3 2 #" ("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 8 #"keywargs"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 28 3 15 #"group-arguments"
0 0 22 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                      "
0 0 28 3 8 #"varargid"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                      "
0 0 28 3 8 #"nDefArgs"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 28 3 23 #"group-keyword-arguments"
0 0 22 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 1 #" "
0 0 28 3 8 #"keywargs"
0 0 22 3 1 #" "
0 0 28 3 7 #"argList"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                      "
0 0 28 3 7 #"varargs"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 34 3 3 #"let"
0 0 22 3 3 #" [("
0 0 28 3 11 #"groupedArgs"
0 0 22 3 2 #" ("
0 0 28 3 19 #"group-all-arguments"
0 0 22 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 29 1 #"\n"
0 0 22 3 45 #"                                             "
0 0 28 3 7 #"argList"
0 0 22 29 1 #"\n"
0 0 22 3 45 #"                                             "
0 0 28 3 8 #"varargid"
0 0 22 29 1 #"\n"
0 0 22 3 45 #"                                             "
0 0 28 3 7 #"varargs"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 28 3 20 #"group-check-defaults"
0 0 22 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                 "
0 0 28 3 8 #"nDefArgs"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                 ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 28 3 8 #"varargid"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"no-vararg"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 37 #"                                     "
0 0 28 3 11 #"groupedArgs"
0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                     ("
0 0 34 3 10 #"drop-right"
0 0 22 3 1 #" "
0 0 28 3 11 #"groupedArgs"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"           "
0 0 28 3 11 #"groupedArgs"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"           "
0 0 17 3 5 #";(try"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 15 #"group-arguments"
0 0 22 3 1 #" "
0 0 19 3 62
#"\"arity mismatch - missing argument: throw TypeError exception\""
0 0 22 3 6 #")))]))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"            "
0 0 17 3 62
#";(lambda () (error 'group-arguments \"pegou essa porra\")))))]))"
0 0 22 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 48 #"(define (group-arguments [ids : (listof symbol)]"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"                         [varargid : symbol]"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"                         [args : (listof CExp)]"
0 0 17 29 1 #"\n"
0 0 17 3 62
#"                         [keywargs : (listof (symbol * CExp))]"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"                         [nDefArgs : number]"
0 0 17 29 1 #"\n"
0 0 17 3 45 #"                         [nStarArgs : number]"
0 0 17 29 1 #"\n"
0 0 17 3 57 #"                         [argList : (hashof symbol CExp)]"
0 0 17 29 1 #"\n"
0 0 17 3 67
#"                         [varargs : (listof CExp)]) : (listof CExp)"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"  (cond"
0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"    [(and (< (length ids) (length args)) (equal? varargid 'no-vararg"
 #"))"
) 0 0 17 29 1 #"\n"
0 0 17 3 123
(
 #"     (error 'group-arguments \"arity mismatch: more arguments than f"
 #"unction can handle. Should throw TypeError exception.\")]"
) 0 0 17 29 1 #"\n"
0 0 17 3 24 #"    [(not (empty? args))"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"     (group-arguments ids"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"                      varargid"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"                      (list)"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"                      keywargs"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"                      nDefArgs"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"                      nStarArgs"
0 0 17 29 1 #"\n"
0 0 17 3 59
#"                      (group-positional-arguments ids args)"
0 0 17 29 1 #"\n"
0 0 17 3 56 #"                      (if (< (length ids) (length args))"
0 0 17 29 1 #"\n"
0 0 17 3 55 #"                          (list-tail args (length ids))"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"                          (list)))]"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"    [(not (empty? keywargs))"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"     (group-arguments ids"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"                      varargid"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"                      (list)"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"                      (list)"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"                      nDefArgs"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"                      nStarArgs"
0 0 17 29 1 #"\n"
0 0 17 3 68
#"                      (group-keyword-arguments ids keywargs argList)"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"                      varargs)]"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"    [else"
0 0 17 29 1 #"\n"
0 0 17 3 48 #"     (let [(groupedArgs (group-all-arguments ids"
0 0 17 29 1 #"\n"
0 0 17 3 52 #"                                             argList"
0 0 17 29 1 #"\n"
0 0 17 3 53 #"                                             varargid"
0 0 17 29 1 #"\n"
0 0 17 3 55 #"                                             varargs))]"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"       (group-check-defaults ids"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"                             nDefArgs"
0 0 17 29 1 #"\n"
0 0 17 3 73
(
 #"                             (drop-right (if (equal? varargid 'no-va"
 #"rarg)"
) 0 0 17 29 1 #"\n"
0 0 17 3 56 #"                                             groupedArgs"
0 0 17 29 1 #"\n"
0 0 17 3 88
(
 #"                                             (drop-right groupedArgs"
 #" 1)) nStarArgs)))]))"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 22 29 1 #"\n"
0 0 17 3 47 #";; helper functions to create ranges of numbers"
0 0 22 29 1 #"\n"
0 0 17 3 28 #";###########################"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 10 #"cnum-range"
0 0 22 3 2 #" ["
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 3 #"map"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 1 #"x"
0 0 22 3 3 #") ("
0 0 34 3 4 #"CNum"
0 0 22 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 4 #")) ("
0 0 28 3 6 #"range2"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 10 #"vnum-range"
0 0 22 3 2 #" ["
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 3 #"map"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 1 #"x"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VNum"
0 0 22 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 4 #")) ("
0 0 28 3 6 #"range2"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 6 #"range2"
0 0 22 3 2 #" ["
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 7 #"reverse"
0 0 22 3 2 #" ("
0 0 34 3 15 #"range-backwards"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 16 #"range-backwards2"
0 0 22 3 2 #" ["
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 2 #"<="
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #") "
0 0 34 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 34 3 1 #"-"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #") ("
0 0 34 3 15 #"range-backwards"
0 0 22 3 2 #" ("
0 0 34 3 1 #"-"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 6 #")))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 11 #"create-hash"
0 0 22 3 2 #" ["
0 0 28 3 4 #"keys"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 28 3 4 #"vals"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 4 #")]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"hashof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 3 #"and"
0 0 22 3 2 #" ("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 4 #"keys"
0 0 22 3 3 #") ("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 4 #"vals"
0 0 22 3 4 #")) ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 3 #"and"
0 0 22 3 2 #" ("
0 0 34 3 5 #"cons?"
0 0 22 3 1 #" "
0 0 28 3 4 #"keys"
0 0 22 3 3 #") ("
0 0 34 3 5 #"cons?"
0 0 22 3 1 #" "
0 0 28 3 4 #"vals"
0 0 22 3 4 #")) ("
0 0 34 3 8 #"hash-set"
0 0 22 3 2 #" ("
0 0 28 3 11 #"create-hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 4 #"keys"
0 0 22 3 3 #") ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 4 #"vals"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 4 #"keys"
0 0 22 3 3 #") ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 4 #"vals"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 11 #"create-hash"
0 0 22 3 1 #" "
0 0 19 3 34 #"\"key and value lists do not match\""
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 12 #"create-clist"
0 0 22 3 2 #" ["
0 0 28 3 4 #"exps"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 4 #")]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 5 #"CHash"
0 0 22 3 2 #" ("
0 0 28 3 11 #"create-hash"
0 0 22 3 2 #" ("
0 0 28 3 10 #"cnum-range"
0 0 22 3 2 #" ("
0 0 34 3 6 #"length"
0 0 22 3 1 #" "
0 0 28 3 4 #"exps"
0 0 22 3 3 #")) "
0 0 28 3 4 #"exps"
0 0 22 3 3 #") ("
0 0 34 3 5 #"cType"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"list\""
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 4 #"list"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 21 #";; create a new class"
0 0 22 29 1 #"\n"
0 0 17 3 37 #";; THIS IS A VERY IMPORTANT FUNCTION!"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 19 #"interp-create-class"
0 0 22 3 2 #" ["
0 0 28 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 28 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 28 3 17 #"fill-class-object"
0 0 22 3 1 #" "
0 0 28 3 4 #"name"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 19 #"interp-create-class"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"Break!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 19 #"interp-create-class"
0 0 22 3 1 #" "
0 0 19 3 11 #"\"Continue!\""
0 0 22 3 3 #")] "
0 0 17 3 15 #";; TODO really?"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 27 #"\"A class should not return\""
0 0 22 3 2 #") "
0 0 28 3 1 #"s"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 90
(
 #";; fill-class-object gets the locals from the environment within the"
 #" body of the class and"
) 0 0 22 29 1 #"\n"
0 0 17 3 95
(
 #";; adds it to the 'elts' at the class object. It returns a VPass, si"
 #"nce a class doesn't return "
) 0 0 22 29 1 #"\n"
0 0 17 3 32 #";; anything, with the new store."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 17 #"fill-class-object"
0 0 22 3 2 #" ["
0 0 28 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 2 #" ("
0 0 28 3 11 #"lookupStore"
0 0 22 3 2 #" ("
0 0 28 3 9 #"lookupVar"
0 0 22 3 2 #"  "
0 0 28 3 4 #"name"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 8 #"VUnbound"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ("
0 0 34 3 5 #"foldl"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 8 #"localVar"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ("
0 0 34 3 5 #"begin"
0 0 22 3 2 #" ("
0 0 34 3 8 #"set-box!"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 2 #" ("
0 0 34 3 8 #"hash-set"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 60
#"                                                           ("
0 0 34 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 34 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 28 3 8 #"localVar"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 60
#"                                                           ("
0 0 28 3 11 #"lookupStore"
0 0 22 3 2 #" ("
0 0 28 3 9 #"lookupEnv"
0 0 22 3 1 #" "
0 0 28 3 8 #"localVar"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 2 #") "
0 0 28 3 1 #"s"
0 0 22 3 4 #"))) "
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                   "
0 0 28 3 1 #"s"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                           "
0 0 17 3 36 #"; (augmentStore (lookupVar name env)"
0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                      "
0 0 17 3 79
(
 #";    (VHash (hash-set (unbox (VHash-elts (lookupStore (lookupVar nam"
 #"e env) s)))"
) 0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                      "
0 0 17 3 55 #";                     (VStr (symbol->string localVar)) "
0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                      "
0 0 17 3 63
#";                     (lookupStore (lookupEnv localVar env) s))"
0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                      "
0 0 17 3 16 #";           uid "
0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                      "
0 0 17 3 17 #";           type)"
0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                      "
0 0 17 3 8 #";    s))"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                          "
0 0 28 3 5 #"store"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ("
0 0 28 3 9 #"getLocals"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 5 #")))] "
0 0 17 3 32 #";; TODO methods aren't working. "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 17 #"fill-class-object"
0 0 22 3 1 #" "
0 0 19 3 70
(
 #"\"when filling a class object, it should be a VHash, not anything el"
 #"se\""
) 0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";;getLocals"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 9 #"getLocals"
0 0 22 3 2 #" ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 6 #"filter"
0 0 22 3 2 #" ("
0 0 34 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 28 3 3 #"key"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 7 #"SLTuple"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 3 #"key"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 3 #") ("
0 0 34 3 5 #"local"
0 0 22 3 3 #" [("
0 0 15 3 13 #"define-values"
0 0 22 3 2 #" ("
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 28 3 1 #"l"
0 0 22 3 2 #") "
0 0 28 3 1 #"v"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 9 #"ScopeType"
0 0 22 3 1 #" "
0 0 28 3 1 #"t"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ["
0 0 14 3 5 #"Local"
0 0 22 3 4 #" () "
0 0 34 3 4 #"true"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ["
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 34 3 5 #"false"
0 0 22 3 4 #"]))]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 17 #"fill-class-object"
0 0 22 3 1 #" "
0 0 19 3 80
(
 #"\"this is just plain wrong, I always should find a value for keys fr"
 #"om hash-keys\""
) 0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 34 3 9 #"hash-keys"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"   "
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 21 #";; interp application"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 19 #"interp-VClosure-App"
0 0 22 3 2 #" ["
0 0 28 3 1 #"e"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 2 #"] "
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 28 3 1 #"a"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 3 #")] "
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 28 3 4 #"varg"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 2 #"] "
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 28 3 1 #"b"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 2 #"] "
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 28 3 7 #"defargs"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #")] "
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 28 3 8 #"keywargs"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 2 #" ("
0 0 14 3 6 #"symbol"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 28 3 4 #"star"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 4 #"star"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"vh"
0 0 22 3 1 #" "
0 0 28 3 2 #"sh"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 2 #"vh"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 1 #"t"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ("
0 0 34 3 3 #"let"
0 0 22 3 3 #" (["
0 0 28 3 13 #"_grouped-args"
0 0 22 3 2 #" ("
0 0 34 3 3 #"try"
0 0 22 3 2 #" ("
0 0 28 3 15 #"group-arguments"
0 0 22 3 1 #" "
0 0 28 3 1 #"a"
0 0 22 3 1 #" "
0 0 28 3 4 #"varg"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 28 3 8 #"keywargs"
0 0 22 3 2 #" ("
0 0 34 3 6 #"length"
0 0 22 3 1 #" "
0 0 28 3 7 #"defargs"
0 0 22 3 3 #") ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 4 #")) ("
0 0 34 3 4 #"list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 56 #"                                                       ("
0 0 15 3 6 #"lambda"
0 0 22 3 5 #" () ("
0 0 34 3 4 #"list"
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 27 #"__group-arguments-exception"
0 0 22 3 6 #"))))])"
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 3 #"and"
0 0 22 3 2 #" ("
0 0 34 3 3 #"not"
0 0 22 3 2 #" ("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 13 #"_grouped-args"
0 0 22 3 4 #")) ("
0 0 34 3 4 #"CId?"
0 0 22 3 2 #" ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 13 #"_grouped-args"
0 0 22 3 4 #")) ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 34 3 5 #"CId-x"
0 0 22 3 2 #" ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 13 #"_grouped-args"
0 0 22 3 3 #")) "
0 0 34 3 1 #"'"
0 0 14 3 27 #"__group-arguments-exception"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 36 #"                                   ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 6 #"CError"
0 0 22 3 2 #" ("
0 0 34 3 4 #"CApp"
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"TypeError"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 62
#"                                                             ("
0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 62
#"                                                             ("
0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 62
#"                                                             ("
0 0 34 3 5 #"CHash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"cType"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"list\""
0 0 22 3 2 #" ("
0 0 34 3 5 #"CNone"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 47 #"                                               "
0 0 28 3 3 #"env"
0 0 22 29 1 #"\n"
0 0 22 3 47 #"                                               "
0 0 28 3 2 #"sh"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 36 #"                                   ("
0 0 28 3 16 #"interp-args-CApp"
0 0 22 3 1 #" "
0 0 28 3 1 #"b"
0 0 22 3 3 #"   "
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                     "
0 0 28 3 3 #"env"
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                     "
0 0 28 3 1 #"e"
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                     "
0 0 28 3 2 #"sh"
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                     "
0 0 17 3 2 #";a"
0 0 22 29 1 #"\n"
0 0 22 3 54 #"                                                     ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 3 #"not"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 28 3 4 #"varg"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"no-vararg"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 58
#"                                                         ("
0 0 34 3 6 #"append"
0 0 22 3 1 #" "
0 0 28 3 1 #"a"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 1 #" "
0 0 28 3 4 #"varg"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 57 #"                                                         "
0 0 28 3 1 #"a"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 54 #"                                                     ("
0 0 28 3 15 #"group-arguments"
0 0 22 3 1 #" "
0 0 28 3 1 #"a"
0 0 22 3 1 #" "
0 0 28 3 4 #"varg"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 28 3 8 #"keywargs"
0 0 22 3 2 #" ("
0 0 34 3 6 #"length"
0 0 22 3 1 #" "
0 0 28 3 7 #"defargs"
0 0 22 3 3 #") ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 4 #")) ("
0 0 34 3 4 #"list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                     "
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 96
(
 #"                                                                    "
 #"         (group-arguments a "
) 0 0 17 29 1 #"\n"
0 0 17 3 99
(
 #"                                                                    "
 #"                          varg "
) 0 0 17 29 1 #"\n"
0 0 17 3 98
(
 #"                                                                    "
 #"                          args"
) 0 0 17 29 1 #"\n"
0 0 17 3 137
(
 #"                                                                    "
 #"                          ;(append args (collapse-chash-args star 0)"
 #")"
) 0 0 17 29 1 #"\n"
0 0 17 3 103
(
 #"                                                                    "
 #"                          keywargs "
) 0 0 17 29 1 #"\n"
0 0 17 3 110
(
 #"                                                                    "
 #"                          (length defargs)"
) 0 0 17 29 1 #"\n"
0 0 17 3 139
(
 #"                                                                    "
 #"                          (length (reverse (collapse-vhash-args vh 0"
 #")))"
) 0 0 17 29 1 #"\n"
0 0 17 3 108
(
 #"                                                                    "
 #"                          (hash (list)) "
) 0 0 17 29 1 #"\n"
0 0 17 3 143
(
 #"                                                                    "
 #"                          (list-tail args (- (length a) (length defa"
 #"rgs))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 79
(
 #"                                                                    "
 #"         |#"
) 0 0 22 29 1 #"\n"
0 0 22 3 54 #"                                                     ("
0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                     "
0 0 28 3 7 #"defargs"
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                     "
0 0 17 3 5 #";star"
0 0 22 29 1 #"\n"
0 0 22 3 57 #"                                                     )))]"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 16 #"interp-args-CApp"
0 0 22 3 1 #" "
0 0 19 3 45 #"\"needs a hash, because star should be a list\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 19 #"interp-VClosure-App"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"Break!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 19 #"interp-VClosure-App"
0 0 22 3 1 #" "
0 0 19 3 11 #"\"Continue!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 45 #";(define (collapse-and-interp [chash : CExp] "
0 0 22 29 1 #"\n"
0 0 17 3 43 #";                             [n : number] "
0 0 22 29 1 #"\n"
0 0 17 3 42 #";                             [env : Env] "
0 0 22 29 1 #"\n"
0 0 17 3 62
#";                             [store : Store]) : (listof CVal)"
0 0 22 29 1 #"\n"
0 0 17 3 14 #";  (type-case "
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 94
(
 #";   [else (cons (hash-ref (CHash-elts chash) (CNum n)) (collapse-cha"
 #"sh-args chash (+ n 1)))]))"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 15 #"transform-ctype"
0 0 22 3 2 #" ["
0 0 28 3 5 #"ctype"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"CType"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"VType"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"Type"
0 0 22 3 2 #" ("
0 0 34 3 10 #"cType-name"
0 0 22 3 1 #" "
0 0 28 3 5 #"ctype"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 2 #" ("
0 0 34 3 14 #"cType-basetype"
0 0 22 3 1 #" "
0 0 28 3 5 #"ctype"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ["
0 0 14 3 3 #"CId"
0 0 22 3 2 #" ("
0 0 28 3 2 #"id"
0 0 22 3 3 #") ("
0 0 28 3 11 #"lookupStore"
0 0 22 3 2 #" ("
0 0 28 3 9 #"lookupVar"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ["
0 0 14 3 5 #"CNone"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"VNone"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ["
0 0 14 3 8 #"CUnbound"
0 0 22 3 5 #" () ("
0 0 34 3 8 #"VUnbound"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 15 #"transform-ctype"
0 0 22 3 1 #" "
0 0 19 3 56
#"\"should not be a CExp other than CId, CNone or CUnbound\""
0 0 22 3 5 #")])))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 19 #"make-index-positive"
0 0 22 3 2 #" ["
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 2 #"] "
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ["
0 0 28 3 7 #"listLen"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 1 #"<"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 34 3 1 #"+"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 28 3 7 #"listLen"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 28 3 1 #"n"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 22 #"correct-list-subscript"
0 0 22 3 2 #" ["
0 0 28 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                ["
0 0 28 3 7 #"listLen"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 6 #"number"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 3 #"val"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 28 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"            [("
0 0 34 3 7 #"fixnum?"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 28 3 19 #"make-index-positive"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 1 #" "
0 0 28 3 7 #"listLen"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 22 #"correct-list-subscript"
0 0 22 3 1 #" "
0 0 19 3 40 #"\"non-Int passed as subscript for a list\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 22 #"correct-list-subscript"
0 0 22 3 1 #" "
0 0 19 3 41 #"\"non-VNum passed as subscript for a list\""
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 13 #"interp-delete"
0 0 22 3 2 #" ["
0 0 28 3 7 #"targets"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 7 #"targets"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 2 #" ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 7 #"targets"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 3 #"CId"
0 0 22 3 2 #" ("
0 0 28 3 2 #"id"
0 0 22 3 3 #") ("
0 0 28 3 13 #"interp-delete"
0 0 22 3 2 #" ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 7 #"targets"
0 0 22 3 2 #") "
0 0 28 3 3 #"env"
0 0 22 3 2 #" ("
0 0 28 3 12 #"augmentStore"
0 0 22 3 2 #" ("
0 0 28 3 9 #"lookupEnv"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 3 #") ("
0 0 34 3 8 #"VUnbound"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 10 #"CSubscript"
0 0 22 3 2 #" ("
0 0 28 3 5 #"value"
0 0 22 3 1 #" "
0 0 28 3 4 #"attr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 5 #"value"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 4 #"attr"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                       ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 28 3 12 #"isInstanceOf"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"dict\""
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 60
#"                                                           ("
0 0 34 3 5 #"begin"
0 0 22 3 2 #" ("
0 0 34 3 8 #"set-box!"
0 0 22 3 2 #" ("
0 0 34 3 10 #"VHash-elts"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-set"
0 0 22 3 2 #" ("
0 0 34 3 11 #"hash-remove"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 2 #" ("
0 0 34 3 10 #"VHash-elts"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 3 #")) "
0 0 28 3 2 #"v2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 103
(
 #"                                                                    "
 #"                                  ("
) 0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 103
(
 #"                                                                    "
 #"                                  ("
) 0 0 34 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 34 3 1 #"-"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 2 #" ("
0 0 28 3 7 #"getAttr"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 2 #") "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #")) "
0 0 20 3 1 #"1"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 67
#"                                                                  ("
0 0 34 3 8 #"set-box!"
0 0 22 3 2 #" ("
0 0 34 3 10 #"VHash-elts"
0 0 22 3 2 #" ("
0 0 28 3 7 #"getAttr"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__keys__\""
0 0 22 3 2 #") "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 77
(
 #"                                                                    "
 #"        ("
) 0 0 34 3 11 #"hash-remove"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 2 #" ("
0 0 34 3 10 #"VHash-elts"
0 0 22 3 2 #" ("
0 0 28 3 7 #"getAttr"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__keys__\""
0 0 22 3 2 #") "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 89
(
 #"                                                                    "
 #"                     "
) 0 0 28 3 2 #"v2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 67
#"                                                                  ("
0 0 28 3 13 #"interp-delete"
0 0 22 3 2 #" ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 7 #"targets"
0 0 22 3 2 #") "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 60
#"                                                           ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 13 #"interp-delete"
0 0 22 3 1 #" "
0 0 19 3 73
(
 #"\"we're not expecting to get anything but dictionaries and ids for d"
 #"elete\""
) 0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                       ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 13 #"interp-delete"
0 0 22 3 1 #" "
0 0 19 3 73
(
 #"\"we expect that all attributes being deleted in the tests to be Val"
 #"ueA's\""
) 0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 13 #"interp-delete"
0 0 22 3 1 #" "
0 0 19 3 69
(
 #"\"we expect that all values being deleted in the tests to be ValueA'"
 #"s\""
) 0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 13 #"interp-delete"
0 0 22 3 1 #" "
0 0 19 3 78
(
 #"\"we expect that delete will only receive CId's or dictionaries (CSu"
 #"bscript's)\""
) 0 0 22 3 6 #")])]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 13 #";; interp-env"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ["
0 0 28 3 4 #"expr"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 2 #"] "
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ["
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 3 #"Env"
0 0 22 3 2 #"] "
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ["
0 0 28 3 5 #"store"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 5 #"Store"
0 0 22 3 3 #"]) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #" "
0 0 28 3 4 #"expr"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"CNum"
0 0 22 3 2 #" ("
0 0 28 3 1 #"n"
0 0 22 3 3 #") ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VNum"
0 0 22 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"CStr"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"CTrue"
0 0 22 3 5 #" () ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VTrue"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"CError"
0 0 22 3 2 #" ("
0 0 28 3 1 #"e"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 1 #"e"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ["
0 0 14 3 5 #"VNone"
0 0 22 3 5 #" () ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 14 #"exn-to-reraise"
0 0 22 3 2 #") "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ["
0 0 14 3 8 #"VUnbound"
0 0 22 3 5 #" () ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 6 #"CError"
0 0 22 3 2 #" ("
0 0 34 3 4 #"CApp"
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"RuntimeError"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 74
(
 #"                                                                    "
 #"     ("
) 0 0 34 3 4 #"list"
0 0 22 3 2 #") "
0 0 17 3 41 #";; TODO this needs to take an argument..."
0 0 22 29 1 #"\n"
0 0 22 3 74
(
 #"                                                                    "
 #"     ("
) 0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 74
(
 #"                                                                    "
 #"     ("
) 0 0 34 3 5 #"CHash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 2 #" ("
0 0 34 3 6 #"values"
0 0 22 3 2 #" ("
0 0 34 3 4 #"CStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 3 #") ("
0 0 34 3 4 #"CNum"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 6 #")))) ("
0 0 34 3 5 #"cType"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"list\""
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 4 #"list"
0 0 22 3 6 #"))))) "
0 0 22 29 1 #"\n"
0 0 22 3 59
#"                                                           "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 59
#"                                                           "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"begin"
0 0 22 3 2 #" ("
0 0 34 3 8 #"set-box!"
0 0 22 3 1 #" "
0 0 28 3 14 #"exn-to-reraise"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 48 #"                                               ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 5 #"))])]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 6 #"CError"
0 0 22 3 1 #" "
0 0 19 3 30 #"\"Should not have a break here\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 6 #"CError"
0 0 22 3 1 #" "
0 0 19 3 33 #"\"Should not have a continue here\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 6 #"CError"
0 0 22 3 1 #" "
0 0 19 3 58
#"\"should not get a Return statement when raising something\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 79
(
 #";(error 'interp (pretty (ValueA-value (interp-env e env store))))] ;"
 #"; exception"
) 0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 7 #"CReturn"
0 0 22 3 2 #" ("
0 0 28 3 5 #"value"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 5 #"value"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 7 #"CReturn"
0 0 22 3 1 #" "
0 0 19 3 30 #"\"Should not have a break here\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 7 #"CReturn"
0 0 22 3 1 #" "
0 0 19 3 33 #"\"Should not have a continue here\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 22 3 1 #" "
0 0 19 3 38 #"\"Return statement inside of Return...\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"CBreak"
0 0 22 3 5 #" () ("
0 0 34 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VPass"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 3 #")] "
0 0 17 3 20 #";; TODO change this?"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 9 #"CContinue"
0 0 22 3 5 #" () ("
0 0 34 3 9 #"ContinueA"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 3 #"CId"
0 0 22 3 2 #" ("
0 0 28 3 1 #"x"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 11 #"lookupStore"
0 0 22 3 2 #" ("
0 0 28 3 9 #"lookupVar"
0 0 22 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"CLet"
0 0 22 3 2 #" ("
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 28 3 9 #"scopeType"
0 0 22 3 1 #" "
0 0 28 3 4 #"bind"
0 0 22 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 4 #"bind"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 34 3 3 #"let"
0 0 22 3 3 #" (["
0 0 28 3 11 #"newLocation"
0 0 22 3 2 #" ("
0 0 28 3 7 #"new-loc"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ("
0 0 28 3 10 #"augmentEnv"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 3 2 #" ("
0 0 34 3 6 #"values"
0 0 22 3 1 #" "
0 0 28 3 9 #"scopeType"
0 0 22 3 1 #" "
0 0 28 3 11 #"newLocation"
0 0 22 3 2 #") "
0 0 28 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ("
0 0 28 3 12 #"augmentStore"
0 0 22 3 1 #" "
0 0 28 3 11 #"newLocation"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 48 #"                                                "
0 0 28 3 1 #"v"
0 0 22 29 1 #"\n"
0 0 22 3 48 #"                                                "
0 0 28 3 1 #"s"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 6 #"BreakA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 9 #"ContinueA"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #")] "
0 0 17 3 15 #";; TODO really?"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 5 #")])] "
0 0 17 3 30 #";; This is a bit suspicious..."
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"CSeq"
0 0 22 3 2 #" ("
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 28 3 2 #"e2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 6 #"BreakA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 9 #"ContinueA"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"CSet"
0 0 22 3 2 #" ("
0 0 28 3 2 #"id"
0 0 22 3 1 #" "
0 0 28 3 5 #"value"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #" "
0 0 28 3 2 #"id"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 3 #"CId"
0 0 22 3 2 #" ("
0 0 28 3 9 #"id-symbol"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 5 #"value"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                       ("
0 0 34 3 6 #"ValueA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 2 #" ("
0 0 28 3 12 #"augmentStore"
0 0 22 3 2 #" ("
0 0 28 3 9 #"lookupEnv"
0 0 22 3 1 #" "
0 0 28 3 9 #"id-symbol"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 63
#"                                                               "
0 0 28 3 1 #"v"
0 0 22 29 1 #"\n"
0 0 22 3 63
#"                                                               "
0 0 28 3 1 #"s"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 8 #"CSet:CId"
0 0 22 3 1 #" "
0 0 19 3 30 #"\"Should not have a break here\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 8 #"CSet:CId"
0 0 22 3 1 #" "
0 0 19 3 33 #"\"Should not have a continue here\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 10 #"CAttribute"
0 0 22 3 2 #" ("
0 0 28 3 4 #"attr"
0 0 22 3 1 #" "
0 0 28 3 7 #"objExpr"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #" "
0 0 28 3 7 #"objExpr"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ["
0 0 14 3 3 #"CId"
0 0 22 3 2 #" ("
0 0 28 3 9 #"id-symbol"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 7 #"objExpr"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                 ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 42 #"                                         ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                           ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 51 #"                                                  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 5 #"value"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                    ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 61
#"                                                            ("
0 0 34 3 6 #"ValueA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 69
(
 #"                                                                    "
 #"("
) 0 0 34 3 5 #"begin"
0 0 22 3 2 #" ("
0 0 34 3 8 #"set-box!"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 2 #" ("
0 0 34 3 8 #"hash-set"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 34 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 28 3 4 #"attr"
0 0 22 3 3 #")) "
0 0 28 3 2 #"v2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 75
(
 #"                                                                    "
 #"       "
) 0 0 28 3 2 #"s2"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 68
#"                                                                    "
0 0 17 3 1 #";"
0 0 22 29 1 #"\n"
0 0 22 3 68
#"                                                                    "
0 0 17 3 40 #";(augmentStore (lookupEnv id-symbol env)"
0 0 22 29 1 #"\n"
0 0 22 3 68
#"                                                                    "
0 0 17 3 106
(
 #";                 (VHash (set-box! elts (hash-set (unbox elts) (VStr"
 #" (symbol->string attr)) v2)) uid type)"
) 0 0 22 29 1 #"\n"
0 0 22 3 68
#"                                                                    "
0 0 17 3 23 #";                 s2))]"
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                    ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 15 #"CSet:CAttribute"
0 0 22 3 1 #" "
0 0 19 3 30 #"\"Should not have a break here\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                    ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 15 #"CSet:CAttribute"
0 0 22 3 1 #" "
0 0 19 3 33 #"\"Should not have a continue here\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                    ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                    ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                           ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 4 #"CSet"
0 0 22 3 1 #" "
0 0 19 3 35 #"\"trying to set field of non-object\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                 ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 15 #"CSet:CAttribute"
0 0 22 3 1 #" "
0 0 19 3 30 #"\"Should not have a break here\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                 ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 15 #"CSet:CAttribute"
0 0 22 3 1 #" "
0 0 19 3 33 #"\"Should not have a continue here\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                 ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                 ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 4 #"CSet"
0 0 22 3 1 #" "
0 0 19 3 53 #"\"CAttribute has an expression in the object position\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 10 #"CSubscript"
0 0 22 3 2 #" ("
0 0 28 3 7 #"objExpr"
0 0 22 3 1 #" "
0 0 28 3 4 #"attr"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #" "
0 0 28 3 7 #"objExpr"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ["
0 0 14 3 3 #"CId"
0 0 22 3 2 #" ("
0 0 28 3 9 #"id-symbol"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 7 #"objExpr"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                 ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 5 #"v-obj"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 42 #"                                         ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 4 #"attr"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                           ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 6 #"v-attr"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 52 #"                                                   ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 5 #"value"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 54 #"                                                     ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 7 #"v-value"
0 0 22 3 1 #" "
0 0 28 3 2 #"s3"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 62
#"                                                             ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 5 #"v-obj"
0 0 22 29 1 #"\n"
0 0 22 3 64
#"                                                               ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 71
(
 #"                                                                    "
 #"  ("
) 0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 74
(
 #"                                                                    "
 #"    [("
) 0 0 34 3 2 #"or"
0 0 22 3 2 #" ("
0 0 28 3 12 #"isInstanceOf"
0 0 22 3 1 #" "
0 0 28 3 5 #"v-obj"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"list\""
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s3"
0 0 22 3 3 #") ("
0 0 28 3 12 #"isInstanceOf"
0 0 22 3 1 #" "
0 0 28 3 5 #"v-obj"
0 0 22 3 1 #" "
0 0 19 3 7 #"\"tuple\""
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s3"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 74
(
 #"                                                                    "
 #"     ("
) 0 0 34 3 3 #"let"
0 0 22 3 3 #" (["
0 0 28 3 8 #"_listLen"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 2 #" ("
0 0 28 3 7 #"getAttr"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 2 #") "
0 0 28 3 5 #"v-obj"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s3"
0 0 22 3 4 #"))])"
0 0 22 29 1 #"\n"
0 0 22 3 76
(
 #"                                                                    "
 #"       ("
) 0 0 34 3 3 #"let"
0 0 22 3 3 #" (["
0 0 28 3 6 #"_index"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 2 #" ("
0 0 28 3 22 #"correct-list-subscript"
0 0 22 3 1 #" "
0 0 28 3 6 #"v-attr"
0 0 22 3 1 #" "
0 0 28 3 8 #"_listLen"
0 0 22 3 4 #"))])"
0 0 22 29 1 #"\n"
0 0 22 3 78
(
 #"                                                                    "
 #"         ("
) 0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 1 #"<"
0 0 22 3 1 #" "
0 0 28 3 8 #"_listLen"
0 0 22 3 1 #" "
0 0 28 3 6 #"_index"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 82
(
 #"                                                                    "
 #"             ("
) 0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 6 #"CError"
0 0 22 3 2 #" ("
0 0 34 3 4 #"CApp"
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 10 #"IndexError"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 108
(
 #"                                                                    "
 #"                                       ("
) 0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 108
(
 #"                                                                    "
 #"                                       ("
) 0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 108
(
 #"                                                                    "
 #"                                       ("
) 0 0 34 3 5 #"CHash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"cType"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"list\""
0 0 22 3 2 #" ("
0 0 34 3 5 #"CNone"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 93
(
 #"                                                                    "
 #"                         "
) 0 0 28 3 3 #"env"
0 0 22 29 1 #"\n"
0 0 22 3 93
(
 #"                                                                    "
 #"                         "
) 0 0 28 3 2 #"s3"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 82
(
 #"                                                                    "
 #"             ("
) 0 0 34 3 6 #"ValueA"
0 0 22 3 1 #" "
0 0 28 3 7 #"v-value"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 90
(
 #"                                                                    "
 #"                     ("
) 0 0 34 3 5 #"begin"
0 0 22 3 2 #" ("
0 0 34 3 8 #"set-box!"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 2 #" ("
0 0 34 3 8 #"hash-set"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VNum"
0 0 22 3 1 #" "
0 0 28 3 6 #"_index"
0 0 22 3 2 #") "
0 0 28 3 7 #"v-value"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 96
(
 #"                                                                    "
 #"                            "
) 0 0 28 3 2 #"s3"
0 0 22 3 6 #")))))]"
0 0 22 29 1 #"\n"
0 0 22 3 74
(
 #"                                                                    "
 #"    [("
) 0 0 28 3 12 #"isInstanceOf"
0 0 22 3 1 #" "
0 0 28 3 5 #"v-obj"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"dict\""
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s3"
0 0 22 3 2 #") "
0 0 17 3 36 #";;TODO TODO TODO handle size here..."
0 0 22 29 1 #"\n"
0 0 22 3 74
(
 #"                                                                    "
 #"     ("
) 0 0 34 3 3 #"try"
0 0 22 3 2 #" ("
0 0 34 3 6 #"ValueA"
0 0 22 3 1 #" "
0 0 28 3 7 #"v-value"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 87
(
 #"                                                                    "
 #"                  ("
) 0 0 34 3 3 #"let"
0 0 22 3 3 #" (["
0 0 28 3 8 #"_dictlen"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 2 #" ("
0 0 28 3 7 #"getAttr"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 2 #") "
0 0 28 3 5 #"v-obj"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s3"
0 0 22 3 4 #"))])"
0 0 22 29 1 #"\n"
0 0 22 3 89
(
 #"                                                                    "
 #"                    ("
) 0 0 34 3 5 #"begin"
0 0 22 3 2 #" ("
0 0 34 3 8 #"set-box!"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 2 #" ("
0 0 34 3 8 #"hash-set"
0 0 22 3 2 #" ("
0 0 34 3 8 #"hash-set"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 2 #") "
0 0 28 3 6 #"v-attr"
0 0 22 3 1 #" "
0 0 28 3 7 #"v-value"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 121
(
 #"                                                                    "
 #"                                                    ("
) 0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 9 #"\"__size__"
0 0 19 3 1 #"\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 121
(
 #"                                                                    "
 #"                                                    ("
) 0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 2 #") "
0 0 28 3 6 #"v-attr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 123
(
 #"                                                                    "
 #"                                                      ["
) 0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VNum"
0 0 22 3 1 #" "
0 0 28 3 8 #"_dictlen"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 123
(
 #"                                                                    "
 #"                                                      ["
) 0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 4 #"VNum"
0 0 22 3 2 #" ("
0 0 34 3 1 #"+"
0 0 22 3 1 #" "
0 0 28 3 8 #"_dictlen"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 6 #"))])))"
0 0 22 29 1 #"\n"
0 0 22 3 96
(
 #"                                                                    "
 #"                           ("
) 0 0 34 3 8 #"set-box!"
0 0 22 3 2 #" ("
0 0 34 3 10 #"VHash-elts"
0 0 22 3 2 #" ("
0 0 28 3 7 #"getAttr"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 9 #"\"__keys__"
0 0 19 3 1 #"\""
0 0 22 3 2 #") "
0 0 28 3 5 #"v-obj"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s3"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 106
(
 #"                                                                    "
 #"                                     ("
) 0 0 34 3 8 #"hash-set"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 2 #" ("
0 0 34 3 10 #"VHash-elts"
0 0 22 3 2 #" ("
0 0 28 3 7 #"getAttr"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 9 #"\"__keys__"
0 0 19 3 1 #"\""
0 0 22 3 2 #") "
0 0 28 3 5 #"v-obj"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s3"
0 0 22 3 4 #"))) "
0 0 22 29 1 #"\n"
0 0 22 3 115
(
 #"                                                                    "
 #"                                               "
) 0 0 28 3 6 #"v-attr"
0 0 22 29 1 #"\n"
0 0 22 3 115
(
 #"                                                                    "
 #"                                               "
) 0 0 28 3 6 #"v-attr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 95
(
 #"                                                                    "
 #"                           "
) 0 0 28 3 2 #"s3"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 79
(
 #"                                                                    "
 #"          ("
) 0 0 15 3 6 #"lambda"
0 0 22 3 5 #" () ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 6 #"CError"
0 0 22 3 2 #" ("
0 0 34 3 4 #"CApp"
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 17 #"UnboundLocalError"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 116
(
 #"                                                                    "
 #"                                               ("
) 0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 116
(
 #"                                                                    "
 #"                                               ("
) 0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 116
(
 #"                                                                    "
 #"                                               ("
) 0 0 34 3 5 #"CHash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"cType"
0 0 22 3 1 #" "
0 0 19 3 5 #"\"list"
0 0 19 3 1 #"\""
0 0 22 3 2 #" ("
0 0 34 3 5 #"CNone"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 101
(
 #"                                                                    "
 #"                                 "
) 0 0 28 3 3 #"env"
0 0 22 29 1 #"\n"
0 0 22 3 101
(
 #"                                                                    "
 #"                                 "
) 0 0 28 3 2 #"s3"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 73
(
 #"                                                                    "
 #"    ["
) 0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 6 #"CError"
0 0 22 3 2 #" ("
0 0 34 3 4 #"CStr"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"tried"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 3 #"get"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 9 #"subscript"
0 0 19 3 1 #" "
0 0 19 3 4 #"from"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 8 #"non-list"
0 0 19 3 1 #","
0 0 19 3 15 #" non-dictionary"
0 0 19 3 1 #"\""
0 0 22 3 3 #")) "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s3"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 64
#"                                                               ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 4 #"CSet"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"trying"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 3 #"set"
0 0 19 3 1 #" "
0 0 19 3 5 #"field"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 11 #" non-object"
0 0 19 3 1 #"\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 54 #"                                                     ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 15 #"CSet:CSubscript"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 4 #"have"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 5 #"break"
0 0 19 3 5 #" here"
0 0 19 3 1 #"\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 54 #"                                                     ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 15 #"CSet:CSubscript"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 4 #"have"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 8 #"continue"
0 0 19 3 5 #" here"
0 0 19 3 1 #"\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 54 #"                                                     ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v3"
0 0 22 3 1 #" "
0 0 28 3 2 #"s3"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v3"
0 0 22 3 1 #" "
0 0 28 3 2 #"s3"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 54 #"                                                     ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v3"
0 0 22 3 1 #" "
0 0 28 3 2 #"s3"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 10 #"CSubscript"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 3 #"get"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 6 #"return"
0 0 19 3 1 #" "
0 0 19 3 9 #"statement"
0 0 19 3 1 #" "
0 0 19 3 4 #"when"
0 0 19 3 1 #" "
0 0 19 3 10 #"evaluating"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 8 #"assigned"
0 0 19 3 6 #" value"
0 0 19 3 1 #"\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                           ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 15 #"CSet:CSubscript"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 4 #"have"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 5 #"break"
0 0 19 3 5 #" here"
0 0 19 3 1 #"\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                           ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 15 #"CSet:CSubscript"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 4 #"have"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 8 #"continue"
0 0 19 3 5 #" here"
0 0 19 3 1 #"\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                           ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                           ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 10 #"CSubscript"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 3 #"get"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 6 #"return"
0 0 19 3 1 #" "
0 0 19 3 9 #"statement"
0 0 19 3 1 #" "
0 0 19 3 4 #"when"
0 0 19 3 1 #" "
0 0 19 3 10 #"evaluating"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 10 #" attribute"
0 0 19 3 1 #"\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                 ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 15 #"CSet:CSubscript"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 4 #"have"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 5 #"break"
0 0 19 3 5 #" here"
0 0 19 3 1 #"\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                 ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 15 #"CSet:CSubscript"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 4 #"have"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 8 #"continue"
0 0 19 3 5 #" here"
0 0 19 3 1 #"\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                 ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                 ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 10 #"CSubscript"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 3 #"get"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 6 #"return"
0 0 19 3 1 #" "
0 0 19 3 9 #"statement"
0 0 19 3 1 #" "
0 0 19 3 4 #"when"
0 0 19 3 1 #" "
0 0 19 3 10 #"evaluating"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 7 #" object"
0 0 19 3 1 #"\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 4 #"CSet"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 10 #"CSubscript"
0 0 19 3 1 #" "
0 0 19 3 3 #"has"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 10 #"expression"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 6 #"object"
0 0 19 3 9 #" position"
0 0 19 3 1 #"\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 11 #"interp-CSet"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"For"
0 0 19 3 1 #" "
0 0 19 3 3 #"now"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 4 #"CSet"
0 0 19 3 1 #" "
0 0 19 3 4 #"only"
0 0 19 3 1 #" "
0 0 19 3 7 #"support"
0 0 19 3 1 #" "
0 0 19 3 3 #"ids"
0 0 19 3 1 #" "
0 0 19 3 4 #"that"
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 7 #"symbols"
0 0 19 3 1 #" "
0 0 19 3 2 #"or"
0 0 19 3 1 #" "
0 0 19 3 11 #"CAttributes"
0 0 19 3 1 #" "
0 0 19 3 2 #"or"
0 0 19 3 12 #" CSubscripts"
0 0 19 3 1 #"\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"CApp"
0 0 22 3 2 #" ("
0 0 28 3 4 #"func"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 28 3 8 #"keywargs"
0 0 22 3 1 #" "
0 0 28 3 4 #"star"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 4 #"func"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"vf"
0 0 22 3 1 #" "
0 0 28 3 2 #"sf"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 2 #"vf"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 8 #"VClosure"
0 0 22 3 2 #" ("
0 0 28 3 1 #"e"
0 0 22 3 1 #" "
0 0 28 3 1 #"a"
0 0 22 3 1 #" "
0 0 28 3 4 #"varg"
0 0 22 3 1 #" "
0 0 28 3 1 #"b"
0 0 22 3 1 #" "
0 0 28 3 7 #"defargs"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 1 #" "
0 0 28 3 4 #"func"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ["
0 0 14 3 10 #"CAttribute"
0 0 22 3 2 #" ("
0 0 28 3 4 #"attr"
0 0 22 3 1 #" "
0 0 28 3 5 #"value"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 47 #"                                              ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 5 #"value"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"sf"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 49 #"                                                ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 29 1 #"\n"
0 0 22 3 65
#"                                                                ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 72
(
 #"                                                                    "
 #"   ("
) 0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 2 #"or"
0 0 22 3 2 #" ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 34 3 9 #"Type-name"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 19 3 6 #"\"class"
0 0 19 3 1 #"\""
0 0 22 3 3 #") ("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 34 3 9 #"Type-name"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 19 3 16 #"\"primitive-class"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 76
(
 #"                                                                    "
 #"       ("
) 0 0 28 3 19 #"interp-VClosure-App"
0 0 22 3 1 #" "
0 0 28 3 1 #"e"
0 0 22 3 1 #" "
0 0 28 3 1 #"a"
0 0 22 3 1 #" "
0 0 28 3 4 #"varg"
0 0 22 3 1 #" "
0 0 28 3 1 #"b"
0 0 22 3 1 #" "
0 0 28 3 7 #"defargs"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 28 3 8 #"keywargs"
0 0 22 3 1 #" "
0 0 28 3 4 #"star"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"sf"
0 0 22 3 2 #") "
0 0 17 3 60
#";we pass sf because we don't want modifications to be passed"
0 0 22 29 1 #"\n"
0 0 22 3 76
(
 #"                                                                    "
 #"       ("
) 0 0 28 3 19 #"interp-VClosure-App"
0 0 22 3 1 #" "
0 0 28 3 1 #"e"
0 0 22 3 1 #" "
0 0 28 3 1 #"a"
0 0 22 3 1 #" "
0 0 28 3 4 #"varg"
0 0 22 3 1 #" "
0 0 28 3 1 #"b"
0 0 22 3 1 #" "
0 0 28 3 7 #"defargs"
0 0 22 3 2 #" ("
0 0 34 3 6 #"append"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 1 #" "
0 0 28 3 5 #"value"
0 0 22 3 2 #") "
0 0 28 3 4 #"args"
0 0 22 3 2 #") "
0 0 28 3 8 #"keywargs"
0 0 22 3 1 #" "
0 0 28 3 4 #"star"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"sf"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 65
#"                                                                ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 6 #"CError"
0 0 22 3 2 #" ("
0 0 34 3 4 #"CStr"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"tried"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 3 #"get"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 9 #"attribute"
0 0 19 3 1 #" "
0 0 19 3 4 #"from"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 9 #" non-hash"
0 0 19 3 1 #"\""
0 0 22 3 3 #")) "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 49 #"                                                ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 4 #"CApp"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 4 #"have"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 5 #"break"
0 0 19 3 5 #" here"
0 0 19 3 1 #"\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 49 #"                                                ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 4 #"CApp"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 4 #"have"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 8 #"continue"
0 0 19 3 5 #" here"
0 0 19 3 1 #"\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 49 #"                                                ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 49 #"                                                ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 10 #"CAttribute"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 3 #"get"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 9 #"attribute"
0 0 19 3 1 #" "
0 0 19 3 4 #"from"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 6 #"return"
0 0 19 3 11 #" expression"
0 0 19 3 1 #"\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 28 3 19 #"interp-VClosure-App"
0 0 22 3 1 #" "
0 0 28 3 1 #"e"
0 0 22 3 1 #" "
0 0 28 3 1 #"a"
0 0 22 3 1 #" "
0 0 28 3 4 #"varg"
0 0 22 3 1 #" "
0 0 28 3 1 #"b"
0 0 22 3 1 #" "
0 0 28 3 7 #"defargs"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 28 3 8 #"keywargs"
0 0 22 3 1 #" "
0 0 28 3 4 #"star"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"sf"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                      "
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ("
0 0 34 3 4 #"cond"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                               [("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 34 3 9 #"Type-name"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 19 3 6 #"\"class"
0 0 19 3 1 #"\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                ("
0 0 34 3 3 #"let"
0 0 22 3 3 #" (["
0 0 28 3 7 #"new-obj"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 34 3 3 #"box"
0 0 22 3 2 #" ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 55 #"                                                      ("
0 0 28 3 7 #"new-uid"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 55 #"                                                      ("
0 0 34 3 4 #"Type"
0 0 22 3 2 #" ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 9 #"\"__name__"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 63
#"                                                              ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 21 #"interp-env:CApp:VHash"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Class"
0 0 19 3 1 #" "
0 0 19 3 5 #"lacks"
0 0 19 3 1 #" "
0 0 19 3 8 #"__name__"
0 0 19 3 6 #" field"
0 0 19 3 1 #"\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 63
#"                                                              ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 2 #"so"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 2 #"so"
0 0 22 29 1 #"\n"
0 0 22 3 76
(
 #"                                                                    "
 #"       ["
) 0 0 14 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 2 #") "
0 0 28 3 1 #"s"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 76
(
 #"                                                                    "
 #"       ["
) 0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 21 #"interp-env:CApp:VHash"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 10 #"Non-string"
0 0 19 3 1 #" "
0 0 19 3 2 #"as"
0 0 19 3 1 #" "
0 0 19 3 4 #"name"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 6 #" class"
0 0 19 3 1 #"\""
0 0 22 3 6 #")])]) "
0 0 22 29 1 #"\n"
0 0 22 3 60
#"                                                            "
0 0 28 3 2 #"vf"
0 0 22 3 4 #"))])"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ("
0 0 34 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 36 #"                                    "
0 0 17 3 45 #";;we call init and then return the new object"
0 0 22 29 1 #"\n"
0 0 22 3 37 #"                                    ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 4 #"CApp"
0 0 22 3 2 #" ("
0 0 34 3 10 #"CAttribute"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 8 #"__init__"
0 0 22 3 2 #" ("
0 0 34 3 7 #"CHolder"
0 0 22 3 1 #" "
0 0 28 3 7 #"new-obj"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 74
(
 #"                                                                    "
 #"     ("
) 0 0 34 3 4 #"list"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 74
(
 #"                                                                    "
 #"     ("
) 0 0 34 3 4 #"list"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 74
(
 #"                                                                    "
 #"     ("
) 0 0 34 3 5 #"CHash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 2 #" ("
0 0 34 3 6 #"values"
0 0 22 3 2 #" ("
0 0 34 3 4 #"CStr"
0 0 22 3 1 #" "
0 0 19 3 9 #"\"__size__"
0 0 19 3 1 #"\""
0 0 22 3 3 #") ("
0 0 34 3 4 #"CNum"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 6 #")))) ("
0 0 34 3 5 #"cType"
0 0 22 3 1 #" "
0 0 19 3 5 #"\"list"
0 0 19 3 1 #"\""
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 4 #"list"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 67
#"                                                                   "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 67
#"                                                                   "
0 0 28 3 2 #"sf"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                      ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 6 #"v-init"
0 0 22 3 1 #" "
0 0 28 3 6 #"s-init"
0 0 22 3 3 #") ("
0 0 34 3 6 #"ValueA"
0 0 22 3 1 #" "
0 0 28 3 7 #"new-obj"
0 0 22 3 1 #" "
0 0 28 3 6 #"s-init"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                      ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 6 #"v-init"
0 0 22 3 1 #" "
0 0 28 3 6 #"s-init"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 6 #"v-init"
0 0 22 3 1 #" "
0 0 28 3 6 #"s-init"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                      ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 30 #"interp-env:CApp:VHash:__init__"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 8 #"receive "
0 0 19 3 8 #"anything"
0 0 19 3 1 #" "
0 0 19 3 4 #"that"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 6 #"ValueA"
0 0 19 3 1 #" "
0 0 19 3 2 #"or"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 11 #" ExceptionA"
0 0 19 3 1 #"\""
0 0 22 3 6 #")])))]"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                               [("
0 0 34 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 34 3 9 #"Type-name"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 19 3 16 #"\"primitive-class"
0 0 19 3 1 #"\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                ("
0 0 34 3 9 #"type-case"
0 0 22 3 2 #" ("
0 0 14 3 8 #"optionof"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 3 #") ("
0 0 34 3 8 #"hash-ref"
0 0 22 3 2 #" ("
0 0 34 3 5 #"unbox"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 12 #"\"__convert__"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ["
0 0 14 3 4 #"none"
0 0 22 3 5 #" () ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 21 #"interp-env:CApp:VHash"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 9 #"Primitive"
0 0 19 3 1 #" "
0 0 19 3 5 #"class"
0 0 19 3 1 #" "
0 0 19 3 5 #"lacks"
0 0 19 3 1 #" "
0 0 19 3 11 #"__convert__"
0 0 19 3 6 #" field"
0 0 19 3 1 #"\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ["
0 0 14 3 4 #"some"
0 0 22 3 2 #" ("
0 0 28 3 2 #"so"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                        ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 2 #"so"
0 0 22 29 1 #"\n"
0 0 22 3 43 #"                                          ["
0 0 14 3 8 #"VClosure"
0 0 22 3 2 #" ("
0 0 28 3 1 #"e"
0 0 22 3 1 #" "
0 0 28 3 1 #"a"
0 0 22 3 1 #" "
0 0 28 3 4 #"varg"
0 0 22 3 1 #" "
0 0 28 3 1 #"b"
0 0 22 3 1 #" "
0 0 28 3 7 #"defargs"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                    ("
0 0 28 3 19 #"interp-VClosure-App"
0 0 22 3 1 #" "
0 0 28 3 1 #"e"
0 0 22 3 1 #" "
0 0 28 3 1 #"a"
0 0 22 3 1 #" "
0 0 28 3 4 #"varg"
0 0 22 3 1 #" "
0 0 28 3 1 #"b"
0 0 22 3 1 #" "
0 0 28 3 7 #"defargs"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 28 3 8 #"keywargs"
0 0 22 3 1 #" "
0 0 28 3 4 #"star"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"sf"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 43 #"                                          ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 21 #"interp-env:CApp:VHash"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 9 #"Primitive"
0 0 19 3 1 #" "
0 0 19 3 5 #"class"
0 0 19 3 1 #" "
0 0 19 3 3 #"has"
0 0 19 3 1 #" "
0 0 19 3 12 #"non-VClosure"
0 0 19 3 1 #" "
0 0 19 3 2 #"as"
0 0 19 3 1 #" "
0 0 19 3 11 #"__convert__"
0 0 19 3 6 #" field"
0 0 19 3 1 #"\""
0 0 22 3 6 #")])])]"
0 0 22 29 1 #"\n"
0 0 22 3 31 #"                               "
0 0 22 29 1 #"\n"
0 0 22 3 31 #"                               "
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 2 #" ("
0 0 28 3 7 #"getAttr"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 9 #"\"__call__"
0 0 19 3 1 #"\""
0 0 22 3 2 #") "
0 0 28 3 2 #"vf"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"sf"
0 0 22 3 2 #") "
0 0 17 3 41 #";; TODO mutation? This is non-mutative..."
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                       ["
0 0 14 3 8 #"VClosure"
0 0 22 3 2 #" ("
0 0 28 3 1 #"e"
0 0 22 3 1 #" "
0 0 28 3 1 #"a"
0 0 22 3 1 #" "
0 0 28 3 4 #"varg"
0 0 22 3 1 #" "
0 0 28 3 1 #"b"
0 0 22 3 1 #" "
0 0 28 3 7 #"defargs"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 2 #") "
0 0 17 3 54 #";; CNone in line below is to remind us that we need to"
0 0 22 29 1 #"\n"
0 0 22 3 57 #"                                                         "
0 0 17 3 65
#";; modify this portion of the code to allow mutation of object..."
0 0 22 29 1 #"\n"
0 0 22 3 58
#"                                                         ("
0 0 28 3 19 #"interp-VClosure-App"
0 0 22 3 1 #" "
0 0 28 3 1 #"e"
0 0 22 3 1 #" "
0 0 28 3 1 #"a"
0 0 22 3 1 #" "
0 0 28 3 4 #"varg"
0 0 22 3 1 #" "
0 0 28 3 1 #"b"
0 0 22 3 1 #" "
0 0 28 3 7 #"defargs"
0 0 22 3 2 #" ("
0 0 34 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 34 3 5 #"CNone"
0 0 22 3 2 #") "
0 0 28 3 4 #"args"
0 0 22 3 2 #") "
0 0 28 3 8 #"keywargs"
0 0 22 3 1 #" "
0 0 28 3 4 #"star"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"sf"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                       ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 21 #"interp-env:CApp:VHash"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Class"
0 0 19 3 1 #" "
0 0 19 3 3 #"has"
0 0 19 3 1 #" "
0 0 19 3 12 #"non-VClosure"
0 0 19 3 1 #" "
0 0 19 3 2 #"as"
0 0 19 3 1 #" "
0 0 19 3 8 #"__call__"
0 0 19 3 6 #" field"
0 0 19 3 1 #"\""
0 0 22 3 6 #")])])]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                      "
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                      "
0 0 17 3 32 #";;TEMPORARY CASE FOR APPLICATION"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 6 #"VClass"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 3 #") ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VClass"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                      "
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 4 #"CApp"
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Applied"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 12 #"non-function"
0 0 19 3 1 #" "
0 0 19 3 3 #"and"
0 0 19 3 1 #" "
0 0 19 3 10 #"non-hash: "
0 0 19 3 1 #"\""
0 0 22 3 2 #" ("
0 0 34 3 6 #"pretty"
0 0 22 3 1 #" "
0 0 28 3 2 #"vf"
0 0 22 3 6 #")))])]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 4 #"CApp"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 4 #"have"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 5 #"break"
0 0 19 3 5 #" here"
0 0 19 3 1 #"\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 4 #"CApp"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 4 #"have"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 8 #"continue"
0 0 19 3 5 #" here"
0 0 19 3 1 #"\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #")] "
0 0 17 3 13 #";; or pass???"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"            )]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"    (type-case CVal (interp-env fun env)"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"       [VClosure (env argxs body)"
0 0 17 29 1 #"\n"
0 0 17 3 76
(
 #"         (local [(define argvs (map (lambda (e) (interp-env e env)) "
 #"arges))]"
) 0 0 17 29 1 #"\n"
0 0 17 3 57 #"          (interp-env body (bind-args argxs argvs env)))]"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"       [else (error 'interp \""
0 0 17 3 3 #"Not"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 7 #"closure"
0 0 17 3 5 #"\")])]"
0 0 17 29 1 #"\n"
0 0 17 3 6 #"    |#"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 7 #"CHolder"
0 0 22 3 2 #" ("
0 0 28 3 4 #"hold"
0 0 22 3 3 #") ("
0 0 34 3 6 #"ValueA"
0 0 22 3 1 #" "
0 0 28 3 4 #"hold"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"CWhile"
0 0 22 3 2 #" ("
0 0 28 3 4 #"test"
0 0 22 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 3 1 #" "
0 0 28 3 6 #"orelse"
0 0 22 3 1 #" "
0 0 28 3 5 #"vlist"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 4 #"test"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 43 #"                                           "
0 0 28 3 3 #"env"
0 0 22 29 1 #"\n"
0 0 22 3 43 #"                                           "
0 0 17 3 19 #";  (newEnvScope env"
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                         "
0 0 17 3 21 #";               vlist"
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                         "
0 0 17 3 22 #";               (list)"
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                         "
0 0 17 3 28 #";               'no-vararg) "
0 0 22 29 1 #"\n"
0 0 22 3 43 #"                                           "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 28 3 8 #"isTruthy"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 63
#"                                                               "
0 0 28 3 3 #"env"
0 0 22 29 1 #"\n"
0 0 22 3 63
#"                                                               "
0 0 17 3 17 #";(newEnvScope env"
0 0 22 29 1 #"\n"
0 0 22 3 63
#"                                                               "
0 0 17 3 19 #";             vlist"
0 0 22 29 1 #"\n"
0 0 22 3 63
#"                                                               "
0 0 17 3 20 #";             (list)"
0 0 22 29 1 #"\n"
0 0 22 3 63
#"                                                               "
0 0 17 3 27 #";             'no-vararg)  "
0 0 22 29 1 #"\n"
0 0 22 3 63
#"                                                               "
0 0 28 3 1 #"s"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 4 #"expr"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 6 #"ValueA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 4 #"expr"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #")] "
0 0 17 3 16 #";; TODO maybe..."
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VPass"
0 0 22 3 2 #") "
0 0 28 3 1 #"s"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 13 #"interp-CWhile"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Why"
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 2 #"we"
0 0 19 3 1 #" "
0 0 19 3 8 #"breaking"
0 0 19 3 1 #" "
0 0 19 3 4 #"from"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 4 #"test"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 6 #"interp"
0 0 19 3 8 #" CWhile?"
0 0 19 3 1 #"\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 13 #"interp-CWhile"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Why"
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 2 #"we"
0 0 19 3 1 #" "
0 0 19 3 10 #"continuing"
0 0 19 3 1 #" "
0 0 19 3 4 #"from"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 4 #"test"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 6 #"interp"
0 0 19 3 8 #" CWhile?"
0 0 19 3 1 #"\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 13 #"interp-CWhile"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Why"
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 2 #"we"
0 0 19 3 1 #" "
0 0 19 3 9 #"returning"
0 0 19 3 1 #" "
0 0 19 3 4 #"from"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 4 #"test"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 6 #"interp"
0 0 19 3 8 #" CWhile?"
0 0 19 3 1 #"\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"CFunc"
0 0 22 3 2 #" ("
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 3 1 #" "
0 0 28 3 5 #"vlist"
0 0 22 3 1 #" "
0 0 28 3 7 #"defargs"
0 0 22 3 1 #" "
0 0 28 3 6 #"vararg"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 28 3 11 #"interp-func"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 28 3 6 #"vararg"
0 0 22 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 3 1 #" "
0 0 28 3 5 #"vlist"
0 0 22 3 1 #" "
0 0 28 3 7 #"defargs"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 2 #") "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"CDel"
0 0 22 3 2 #" ("
0 0 28 3 7 #"targets"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VPass"
0 0 22 3 3 #") ("
0 0 28 3 13 #"interp-delete"
0 0 22 3 1 #" "
0 0 28 3 7 #"targets"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 100
(
 #";(ValueA (VClosure (newEnvScope env vlist args) args body () (new-ui"
 #"d)) store)] ;; TODO use vlist..."
) 0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"CPrim1"
0 0 22 3 2 #" ("
0 0 28 3 4 #"prim"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 3 3 #") ("
0 0 28 3 12 #"interp-unary"
0 0 22 3 1 #" "
0 0 28 3 4 #"prim"
0 0 22 3 1 #" "
0 0 28 3 3 #"arg"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"CPrim2"
0 0 22 3 2 #" ("
0 0 28 3 2 #"op"
0 0 22 3 1 #" "
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 28 3 2 #"e2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 34 3 4 #"case"
0 0 22 3 1 #" "
0 0 28 3 2 #"op"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"              "
0 0 17 3 9 #";;boolops"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"              "
0 0 17 3 55 #";; These short-circuit, and so need their own system..."
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 20 3 1 #"'"
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 28 3 9 #"interp-or"
0 0 22 3 1 #" "
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 20 3 1 #"'"
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-and"
0 0 22 3 1 #" "
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 20 3 1 #"'"
0 0 14 3 2 #"is"
0 0 22 3 2 #" ("
0 0 28 3 9 #"interp-is"
0 0 22 3 1 #" "
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 3 #")] "
0 0 17 3 37 #";; might want to think about these..."
0 0 22 29 1 #"\n"
0 0 22 3 12 #"            "
0 0 17 3 42 #";  ['isNot (interp-isNot e1 e2 env store)]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 20 3 1 #"'"
0 0 14 3 2 #"in"
0 0 22 3 2 #" ("
0 0 28 3 9 #"interp-in"
0 0 22 3 1 #" "
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 20 3 1 #"'"
0 0 14 3 5 #"list+"
0 0 22 3 2 #" ("
0 0 28 3 18 #"merge-listy-things"
0 0 22 3 1 #" "
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 20 3 1 #"'"
0 0 14 3 6 #"tuple+"
0 0 22 3 2 #" ("
0 0 28 3 18 #"merge-listy-things"
0 0 22 3 1 #" "
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 20 3 1 #"'"
0 0 14 3 10 #"isinstance"
0 0 22 3 2 #" ("
0 0 28 3 17 #"interp-isinstance"
0 0 22 3 1 #" "
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 28 3 12 #"interp-binop"
0 0 22 3 1 #" "
0 0 28 3 2 #"op"
0 0 22 3 1 #" "
0 0 28 3 2 #"e1"
0 0 22 3 1 #" "
0 0 28 3 2 #"e2"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 3 #"CIf"
0 0 22 3 2 #" ("
0 0 28 3 1 #"i"
0 0 22 3 1 #" "
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 28 3 1 #"e"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 1 #"i"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 28 3 8 #"isTruthy"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 1 #"t"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 1 #"e"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 3 #"CIf"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 4 #"have"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 5 #"break"
0 0 19 3 5 #" here"
0 0 19 3 1 #"\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 3 #"CIf"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 4 #"have"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 8 #"continue"
0 0 19 3 5 #" here"
0 0 19 3 1 #"\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"CNone"
0 0 22 3 5 #" () ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VNone"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"CFalse"
0 0 22 3 5 #" () ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VFalse"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 3 #")] "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"CPass"
0 0 22 3 5 #" () ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VNone"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 3 #")] "
0 0 17 3 44 #";; doing nothing. We need a case for that..."
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 8 #"CUnbound"
0 0 22 3 5 #" () ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 8 #"VUnbound"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"CGlobalEnv"
0 0 22 3 4 #" () "
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 34 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 34 3 4 #"set!"
0 0 22 3 1 #" "
0 0 30 3 9 #"globalEnv"
0 0 22 3 2 #" ("
0 0 28 3 15 #"createGlobalEnv"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 5 #"VNone"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"CAttribute"
0 0 22 3 2 #" ("
0 0 28 3 4 #"attr"
0 0 22 3 1 #" "
0 0 28 3 5 #"value"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 5 #"value"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 3 #") ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 7 #"getAttr"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 2 #" ("
0 0 34 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 28 3 4 #"attr"
0 0 22 3 3 #")) "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #") "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                  "
0 0 17 3 83
(
 #";[VClass (elts type) (ValueA (getAttr (VStr (symbol->string attr)) v"
 #" env store) s)]"
) 0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 6 #"CError"
0 0 22 3 2 #" ("
0 0 34 3 4 #"CStr"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"tried"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 3 #"get"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 9 #"attribute"
0 0 19 3 1 #" "
0 0 19 3 4 #"from"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 9 #" non-hash"
0 0 19 3 1 #"\""
0 0 22 3 3 #")) "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 10 #"CAttribute"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 4 #"have"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 5 #"break"
0 0 19 3 5 #" here"
0 0 19 3 1 #"\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 10 #"CAttribute"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Should"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 4 #"have"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 9 #"continue "
0 0 19 3 5 #"here\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 10 #"CAttribute"
0 0 22 3 1 #" "
0 0 19 3 54 #"\"should not get an attribute from a return expression\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"CSubscript"
0 0 22 3 2 #" ("
0 0 28 3 5 #"value"
0 0 22 3 1 #" "
0 0 28 3 4 #"attr"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 5 #"value"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 4 #"attr"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 37 #"                                    ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                      ["
0 0 14 3 5 #"VHash"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 3 #"uid"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 46 #"                                             ("
0 0 34 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 49 #"                                               [("
0 0 34 3 2 #"or"
0 0 22 3 2 #" ("
0 0 28 3 12 #"isInstanceOf"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"list\""
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 28 3 12 #"isInstanceOf"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 19 3 7 #"\"tuple\""
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 49 #"                                                ("
0 0 34 3 3 #"let"
0 0 22 3 3 #" (["
0 0 28 3 8 #"_listLen"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 2 #" ("
0 0 28 3 7 #"getAttr"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"__size__\""
0 0 22 3 2 #") "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 4 #"))])"
0 0 22 29 1 #"\n"
0 0 22 3 51 #"                                                  ("
0 0 34 3 3 #"let"
0 0 22 3 3 #" (["
0 0 28 3 6 #"_index"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VNum-n"
0 0 22 3 2 #" ("
0 0 28 3 22 #"correct-list-subscript"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 8 #"_listLen"
0 0 22 3 4 #"))])"
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                    ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 34 3 1 #"<"
0 0 22 3 1 #" "
0 0 28 3 8 #"_listLen"
0 0 22 3 1 #" "
0 0 28 3 6 #"_index"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 57 #"                                                        ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 6 #"CError"
0 0 22 3 2 #" ("
0 0 34 3 4 #"CApp"
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 10 #"IndexError"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 83
(
 #"                                                                    "
 #"              ("
) 0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 83
(
 #"                                                                    "
 #"              ("
) 0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 83
(
 #"                                                                    "
 #"              ("
) 0 0 34 3 5 #"CHash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"cType"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"list\""
0 0 22 3 2 #" ("
0 0 34 3 5 #"CNone"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 68
#"                                                                    "
0 0 28 3 3 #"env"
0 0 22 29 1 #"\n"
0 0 22 3 68
#"                                                                    "
0 0 28 3 2 #"s2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 57 #"                                                        ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 7 #"getAttr"
0 0 22 3 2 #" ("
0 0 34 3 4 #"VNum"
0 0 22 3 1 #" "
0 0 28 3 6 #"_index"
0 0 22 3 2 #") "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 5 #"))))]"
0 0 22 29 1 #"\n"
0 0 22 3 49 #"                                               [("
0 0 28 3 12 #"isInstanceOf"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"dict\""
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 49 #"                                                ("
0 0 34 3 3 #"try"
0 0 22 3 2 #" ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 7 #"getAttr"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"v1"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 2 #") "
0 0 28 3 2 #"s2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 54 #"                                                     ("
0 0 15 3 6 #"lambda"
0 0 22 3 5 #" () ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 6 #"CError"
0 0 22 3 2 #" ("
0 0 34 3 4 #"CApp"
0 0 22 3 2 #" ("
0 0 34 3 3 #"CId"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 17 #"UnboundLocalError"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 91
(
 #"                                                                    "
 #"                      ("
) 0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 91
(
 #"                                                                    "
 #"                      ("
) 0 0 34 3 4 #"list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 91
(
 #"                                                                    "
 #"                      ("
) 0 0 34 3 5 #"CHash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 4 #")) ("
0 0 34 3 5 #"cType"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"list\""
0 0 22 3 2 #" ("
0 0 34 3 5 #"CNone"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 76
(
 #"                                                                    "
 #"        "
) 0 0 28 3 3 #"env"
0 0 22 29 1 #"\n"
0 0 22 3 76
(
 #"                                                                    "
 #"        "
) 0 0 28 3 2 #"s2"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 48 #"                                               ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 6 #"CError"
0 0 22 3 2 #" ("
0 0 34 3 4 #"CStr"
0 0 22 3 1 #" "
0 0 19 3 58
#"\"tried to get a subscript from a non-list, non-dictionary\""
0 0 22 3 3 #")) "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                      ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 2 #" ("
0 0 34 3 6 #"CError"
0 0 22 3 2 #" ("
0 0 34 3 4 #"CStr"
0 0 22 3 1 #" "
0 0 19 3 47 #"\"tried to get a subscript from a non-hash CVal\""
0 0 22 3 3 #")) "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 10 #"CSubscript"
0 0 22 3 1 #" "
0 0 19 3 30 #"\"Should not have a break here\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 10 #"CSubscript"
0 0 22 3 1 #" "
0 0 19 3 33 #"\"Should not have a continue here\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 10 #"CSubscript"
0 0 22 3 1 #" "
0 0 19 3 58
#"\"should not get a return expression from a subscript attr\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 10 #"CSubscript"
0 0 22 3 1 #" "
0 0 19 3 30 #"\"Should not have a break here\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 10 #"CSubscript"
0 0 22 3 1 #" "
0 0 19 3 33 #"\"Should not have a continue here\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 10 #"CSubscript"
0 0 22 3 1 #" "
0 0 19 3 59
#"\"should not get a return expression from a subscript value\""
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 90
(
 #"    [CDict (dict) (type-case AnswerC (interp-dict-insides (hash-keys"
 #" dict) dict env store)"
) 0 0 17 29 1 #"\n"
0 0 17 3 47 #"                    [ValueA (v s) (ValueA v s)]"
0 0 17 29 1 #"\n"
0 0 17 3 55 #"                    [ExceptionA (v s) (ExceptionA v s)]"
0 0 17 29 1 #"\n"
0 0 17 3 118
(
 #"                    [ReturnA (v s) (error 'interp \"Something is wro"
 #"ng here - shuldn't be a return inside a dict. \")])]"
) 0 0 17 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 17 29 1 #"\n"
0 0 17 3 81
(
 #"    [CList (l) (type-case AnswerC (interp-list-insides (hash-keys l)"
 #" l env store)"
) 0 0 17 29 1 #"\n"
0 0 17 3 44 #"                 [ValueA (v s) (ValueA v s)]"
0 0 17 29 1 #"\n"
0 0 17 3 52 #"                 [ExceptionA (v s) (ExceptionA v s)]"
0 0 17 29 1 #"\n"
0 0 17 3 115
(
 #"                 [ReturnA (v s) (error 'interp \"Something is wrong "
 #"here - shuldn't be a return inside a list. \")])]"
) 0 0 17 29 1 #"\n"
0 0 17 3 91
(
 #"    [CTuple (elts) (type-case AnswerC (interp-list-insides (hash-key"
 #"s elts) elts env store)"
) 0 0 17 29 1 #"\n"
0 0 17 3 44 #"                 [ValueA (v s) (ValueA v s)]"
0 0 17 29 1 #"\n"
0 0 17 3 52 #"                 [ExceptionA (v s) (ExceptionA v s)]"
0 0 17 29 1 #"\n"
0 0 17 3 116
(
 #"                 [ReturnA (v s) (error 'interp \"Something is wrong "
 #"here - shuldn't be a return inside a tuple. \")])]"
) 0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 5 #"CHash"
0 0 22 3 2 #" ("
0 0 28 3 1 #"h"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 3 #") ("
0 0 28 3 12 #"interp-CHash"
0 0 22 3 2 #" ("
0 0 34 3 9 #"hash-keys"
0 0 22 3 1 #" "
0 0 28 3 1 #"h"
0 0 22 3 2 #") "
0 0 28 3 1 #"h"
0 0 22 3 2 #" ("
0 0 28 3 15 #"transform-ctype"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #") "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 67
#";;This class is just temporary, so that we can pass exception tests"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"CClass"
0 0 22 3 2 #" ("
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 3 #") ("
0 0 34 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 34 3 6 #"VClass"
0 0 22 3 1 #" "
0 0 28 3 4 #"elts"
0 0 22 3 1 #" "
0 0 28 3 4 #"type"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 34 #";; Create a new class!!!!!!!!!!!!!"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 12 #"CCreateClass"
0 0 22 3 2 #" ("
0 0 28 3 4 #"name"
0 0 22 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 3 1 #" "
0 0 28 3 5 #"vlist"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 28 3 19 #"interp-create-class"
0 0 22 3 1 #" "
0 0 28 3 4 #"name"
0 0 22 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 3 2 #" ("
0 0 28 3 11 #"newEnvScope"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"vlist"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 2 #") "
0 0 34 3 1 #"'"
0 0 14 3 9 #"no-vararg"
0 0 22 3 2 #") "
0 0 28 3 5 #"store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 21 #";; exception handling"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"CTryExcept"
0 0 22 3 2 #" ("
0 0 28 3 4 #"body"
0 0 22 3 1 #" "
0 0 28 3 8 #"handlers"
0 0 22 3 1 #" "
0 0 28 3 6 #"orelse"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 6 #"orelse"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 6 #"BreakA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 9 #"ContinueA"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 2 #"if"
0 0 22 3 2 #" ("
0 0 28 3 20 #"hasMatchingException"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 8 #"handlers"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                        ("
0 0 28 3 15 #"interp-handlers"
0 0 22 3 1 #" "
0 0 28 3 8 #"handlers"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                        ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 6 #"orelse"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 11 #"CTryFinally"
0 0 22 3 2 #" ("
0 0 28 3 4 #"body"
0 0 22 3 1 #" "
0 0 28 3 9 #"finalbody"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 5 #"store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 37 #"                                    ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 9 #"finalbody"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 37 #"                                    ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 9 #"finalbody"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 57 #"                                                        ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 57 #"                                                        ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 11 #"CTryFinally"
0 0 22 3 1 #" "
0 0 19 3 36 #"\"Should not have a break here (???)\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 57 #"                                                        ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 11 #"CTryFinally"
0 0 22 3 1 #" "
0 0 19 3 39 #"\"Should not have a continue here (???)\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 57 #"                                                        ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 57 #"                                                        ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 4 #")])]"
0 0 22 29 1 #"\n"
0 0 22 3 37 #"                                    ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 6 #"BreakA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 37 #"                                    ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 9 #"ContinueA"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 37 #"                                    ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 9 #"finalbody"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 54 #"                                                     ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 54 #"                                                     ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 11 #"CTryFinally"
0 0 22 3 1 #" "
0 0 19 3 36 #"\"Should not have a break here (???)\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 54 #"                                                     ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 11 #"CTryFinally"
0 0 22 3 1 #" "
0 0 19 3 39 #"\"Should not have a continue here (???)\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 54 #"                                                     ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 10 #"ExceptionA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 54 #"                                                     ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 3 #") ("
0 0 34 3 7 #"ReturnA"
0 0 22 3 1 #" "
0 0 28 3 2 #"v2"
0 0 22 3 1 #" "
0 0 28 3 2 #"s2"
0 0 22 3 6 #")])])]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 22 3 2 #" ("
0 0 34 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 35 #"\"Haven't implemented a case yet:\\n\""
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                        ("
0 0 34 3 9 #"to-string"
0 0 22 3 1 #" "
0 0 28 3 4 #"expr"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    ))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 9 #"bind-args"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 1 #" "
0 0 28 3 4 #"vals"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 4 #"cond"
0 0 22 3 3 #" [("
0 0 34 3 3 #"and"
0 0 22 3 2 #" ("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 3 #") ("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 4 #"vals"
0 0 22 3 3 #")) "
0 0 28 3 3 #"env"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        [("
0 0 34 3 2 #"or"
0 0 22 3 2 #" ("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 3 #") ("
0 0 34 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 28 3 4 #"vals"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 22 3 1 #" "
0 0 19 3 16 #"\"Arity mismatch\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        [("
0 0 34 3 3 #"and"
0 0 22 3 2 #" ("
0 0 34 3 5 #"cons?"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 3 #") ("
0 0 34 3 5 #"cons?"
0 0 22 3 1 #" "
0 0 28 3 4 #"vals"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 34 3 8 #"hash-set"
0 0 22 3 2 #" ("
0 0 28 3 9 #"bind-args"
0 0 22 3 2 #" ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 3 #") ("
0 0 34 3 4 #"rest"
0 0 22 3 1 #" "
0 0 28 3 4 #"vals"
0 0 22 3 2 #") "
0 0 28 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 4 #"args"
0 0 22 3 3 #") ("
0 0 34 3 5 #"first"
0 0 22 3 1 #" "
0 0 28 3 4 #"vals"
0 0 22 3 5 #"))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 20 #";; regular interpret"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 2 #" ("
0 0 28 3 6 #"interp"
0 0 22 3 2 #" ("
0 0 28 3 4 #"expr"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CExp"
0 0 22 3 3 #")) "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 14 3 4 #"CVal"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 34 3 9 #"type-case"
0 0 22 3 1 #" "
0 0 14 3 7 #"AnswerC"
0 0 22 3 2 #" ("
0 0 28 3 10 #"interp-env"
0 0 22 3 1 #" "
0 0 28 3 4 #"expr"
0 0 22 3 2 #" ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 4 #")) ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"ValueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 2 #") "
0 0 28 3 1 #"v"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 10 #"ExceptionA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"exception"
0 0 22 3 2 #" ("
0 0 34 3 6 #"pretty"
0 0 22 3 1 #" "
0 0 28 3 1 #"v"
0 0 22 3 4 #"))] "
0 0 17 3 11 #";; really? "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 6 #"BreakA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"exception"
0 0 22 3 1 #" "
0 0 19 3 29 #"\"A break got to the surface!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 9 #"ContinueA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 5 #"error"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 9 #"exception"
0 0 22 3 1 #" "
0 0 19 3 32 #"\"A continue got to the surface!\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 7 #"ReturnA"
0 0 22 3 2 #" ("
0 0 28 3 1 #"v"
0 0 22 3 1 #" "
0 0 28 3 1 #"s"
0 0 22 3 3 #") ("
0 0 34 3 4 #"VStr"
0 0 22 3 1 #" "
0 0 19 3 36 #"\"Error: Return outside of function.\""
0 0 22 3 4 #")]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 19 #";; basic test cases"
0 0 22 29 1 #"\n"
0 0 17 3 18 #";;(interp (CTrue))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 1 #" "
0 0 28 3 3 #"env"
0 0 22 3 2 #" ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 2 #" ("
0 0 34 3 6 #"values"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 1 #"a"
0 0 22 3 2 #" ("
0 0 34 3 6 #"values"
0 0 22 3 2 #" ("
0 0 34 3 5 #"Local"
0 0 22 3 2 #") "
0 0 20 3 1 #"1"
0 0 22 3 4 #")) ("
0 0 34 3 6 #"values"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 1 #"b"
0 0 22 3 2 #" ("
0 0 34 3 6 #"values"
0 0 22 3 2 #" ("
0 0 34 3 8 #"NonLocal"
0 0 22 3 2 #") "
0 0 20 3 1 #"2"
0 0 22 3 4 #")) ("
0 0 34 3 6 #"values"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 1 #"c"
0 0 22 3 2 #" ("
0 0 34 3 6 #"values"
0 0 22 3 2 #" ("
0 0 34 3 6 #"Global"
0 0 22 3 2 #") "
0 0 20 3 1 #"3"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 22 3 1 #" "
0 0 28 3 1 #"h"
0 0 22 3 2 #" ("
0 0 34 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 34 3 4 #"list"
0 0 22 3 2 #" ("
0 0 34 3 6 #"values"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #" ("
0 0 34 3 6 #"values"
0 0 22 3 2 #" ("
0 0 34 3 5 #"Local"
0 0 22 3 2 #") "
0 0 20 3 1 #"1"
0 0 22 3 4 #")) ("
0 0 34 3 6 #"values"
0 0 22 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 1 #"y"
0 0 22 3 2 #" ("
0 0 34 3 6 #"values"
0 0 22 3 2 #" ("
0 0 34 3 8 #"NonLocal"
0 0 22 3 2 #") "
0 0 20 3 1 #"2"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";(make-new-map "
0 0 22 29 1 #"\n"
0 0 17 3 46 #";   (list (VNum 0) (VNum 1) (VNum 2) (VNum 3))"
0 0 22 29 1 #"\n"
0 0 17 3 55
#";   (list (VStr \"s\") (VStr \"p\") (VStr \"a\") (VStr \"m\")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";(interp (CPrim1 'print (CNum 4)))"
0           0
